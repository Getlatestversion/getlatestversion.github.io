<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops articles on GetLatestVersion – Europe</title><link>http://www.getlatestversion.eu/categories/devops-articles/</link><description>Recent content in devops articles on GetLatestVersion – Europe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Aug 2020 17:30:00 +0200</lastBuildDate><atom:link href="http://www.getlatestversion.eu/categories/devops-articles/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating work items from Jira to Azure DevOps</title><link>http://www.getlatestversion.eu/2020/08/migrating-work-items-from-jira-to-azure-devops/</link><pubDate>Tue, 18 Aug 2020 17:30:00 +0200</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/2020/08/migrating-work-items-from-jira-to-azure-devops/</guid><description>&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>Migrations are hard tasks to deal with. Not just for IT. Working with the culture of many companies, I&amp;rsquo;ve got confirmation that the tool should be considered at the end of the migration process. After setting up the ceremonies and switching the methodologies from legacy to lean/iterative, it comes finally to choose from the available tools (&lt;em>enterprise awareness&lt;/em>) and including new ones. The goal is to get all the stuff which fits the real scenario.&lt;/p>
&lt;p>This post is a quick step by step guide to migrate work items from &lt;a href="https://www.atlassian.com/software/jira">Jira cloud&lt;/a> to &lt;a href="https://azure.microsoft.com/it-it/services/devops/">Azure DevOps Services&lt;/a>. I&amp;rsquo;m going to describe the last step of one of my customers&amp;rsquo; migration.&lt;/p>
&lt;h2 id="table-of-content">Table of content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#Getting-started">Getting started&lt;/a>&lt;/li>
&lt;li>&lt;a href="#The-software-selection">The software selection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Executing-the-tool">Executing the tool&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#How-to-export-Jira-issues">How to export Jira issues&lt;/a>&lt;/li>
&lt;li>&lt;a href="#How-to-import-to-Azure-DevOps">How to import to Azure DevOps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#Conclusions">Conclusions&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>Before going in-depth with technical details, I would like to share some tips. As we have already said, the migrations are complex tasks. Mandatory requirements should be a strong knowledge in terms of business and team management, enterprise awareness and years of experience on different real scenarios.&lt;/p>
&lt;p>We must avoid any decision if our ideas and targets are not clear. Another important requirement is to understand in depth the workflows you will work on, both the legacy one and the new one you&amp;rsquo;re figuring out. Some of the question we should ask ourselves are:&lt;/p>
&lt;ul>
&lt;li>Do we require these steps? And what about these work items?&lt;/li>
&lt;li>Is this state workflow good for us? Should we change it? How?&lt;/li>
&lt;li>Do we require to preserve relationships and items&amp;rsquo; history?&lt;/li>
&lt;li>Can we keep something which is working very well now? If so, what tools we&amp;rsquo;re thinking about?&lt;/li>
&lt;/ul>
&lt;h2 id="the-software-selection">The software selection&lt;/h2>
&lt;p>The software selection has ended up on a tool made by &lt;a href="https://solidify.se/">Solidify&lt;/a> (Thanks to the experienced members of our &lt;a href="https://www.getlatestversion.eu/">getlatestversion.eu&lt;/a> community). Anyways, you can find more of them. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ilclubdellesei.blog/2018/05/21/import-from-jira-to-vsts-in-5-steps/">TFS4JIRA&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2019/01/19/import-work-item-from-external-system-to-azure-devops/">Importing work items to Azure DevOps by Gian Maria Ricci&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ilclubdellesei.blog/2018/05/21/import-from-jira-to-vsts-in-5-steps/">JiraToVsts &lt;/a> (via &lt;a href="https://www.getlatestversion.eu/it/authors/phenix/">Michele Ferracin&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>When exporting from Jira, the CLI implemented by &lt;a href="https://solidify.se/">Solidify&lt;/a> connects to the Jira server (cloud by default and on-premises when configured), executes a &lt;a href="https://www.atlassian.com/software/jira/guides/expand-jira/jql">JQL&lt;/a> query for extracting the Jira so-called &amp;ldquo;Issues&amp;rdquo;, evaluates and applies the mapping between users, work items, relationships and states, and exports a JSON file for each item.&lt;/p>
&lt;p>When importing to Azure DevOps, the CLI imports the output JSON files using the same mapping configured into the configuration file in the exporting phase.&lt;/p>
&lt;p>Why this tool? Because it has a couple of simple command lines and it consumes a JSON configuration which is clear. Additionally, it has many default behaviours, like the built-in configuration for &lt;em>Scrum&lt;/em>, &lt;em>agile&lt;/em> and &lt;em>basic&lt;/em> process templates, which allows us to forget about the complexity of both the source and target software.&lt;/p>
&lt;p>&lt;a href="#Intro">Back to top&lt;/a>&lt;/p>
&lt;h2 id="executing-the-tool">Executing the tool&lt;/h2>
&lt;p>The scenario (Jira) has been configured with many states, sometimes with overlapping meaning (due to the legacy setup and different team&amp;rsquo;s approach) and with custom workflows/links. On the other hand, Azure DevOps side, I&amp;rsquo;ve created a customized Scrum template, with just two new work item types, which should support some of the customized source behaviours, and a couple of new states. So the tool has been configured as depicted in the following JSON (just a subset of maps):&lt;/p>
&lt;p>&lt;img src="./01-config.png" alt="config">&lt;/p>
&lt;p>Just that. Notice that we can configure project names, the JQL query for gathering issues, working folder names and the file for the user mappings.&lt;/p>
&lt;p>First, download &lt;a href="https://github.com/solidify/jira-azuredevops-migrator/releases">the latest release of the CLI from GitHub&lt;/a>. Then follow these steps-&lt;/p>
&lt;h3 id="how-to-export-jira-issues">How to export Jira issues&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>create a folder called C:/Temp/JiraExport (you can configure this editing the JSON config file)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>create a file called &amp;ldquo;users.txt&amp;rdquo; within that folder and put into it a list of &lt;code>jirauser@domain.ext=AzDOs@domain.ext&lt;/code> records&lt;/p>
&lt;ul>
&lt;li>please note that the Jira user can be represented without the domain, depending on its configuration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>copy the JSON configuration file (based on the template we&amp;rsquo;re going to apply when importing) into the JiraExport folder&lt;/p>
&lt;ul>
&lt;li>modify the file in the maps section: link-map, type-map, field-map, and so on.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>get the credentials (as admin) and the Jira server URL&lt;/p>
&lt;/li>
&lt;li>
&lt;p>make your command line, which should look like the following:
&lt;code>jira-export -u username@domain.ext -p userPwd --url https://jiraurl.ext --config config-scrum.json --force&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run the command and look for the JSON files into the JiraExport folder&lt;/p>
&lt;ul>
&lt;li>look for any warning/error like the following and correct them (this will help you to import without any breaking change)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./02-errors.png" alt="errors">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="#Intro">Back to top&lt;/a>&lt;/p>
&lt;h3 id="how-to-import-to-azure-devops">How to import to Azure DevOps&lt;/h3>
&lt;p>It&amp;rsquo;s time to execute the second command line, &lt;strong>wi-import&lt;/strong>. As we can see, we have to get a personal access token (PAT) from Azure DevOps, as described &lt;a href="https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&amp;amp;tabs=preview-page">in the documentation&lt;/a>, with the full access.&lt;/p>
&lt;p>Coming back to the configuration, we should pay attention to &lt;code>base-area-path&lt;/code> and &lt;code>base-iteration-path&lt;/code>. With these, we can choose the target of our migration, in terms of area and iteration. This means that we can manage our items after the import has been completed. With a query, for example, we can remove everything and start over with the migration. Cool. The command should like the following:&lt;/p>
&lt;p>&lt;code>wi-import --token PAT --url https://dev.azure.com/org --config config-scrum.json --force&lt;/code>&lt;/p>
&lt;p>&lt;img src="./03-import.png" alt="import">&lt;/p>
&lt;p>After ten minutes we&amp;rsquo;ve got new areas and iterations:&lt;/p>
&lt;p>&lt;img src="./04-iterations.png" alt="iterations"> &lt;img src="./05-areas.png" alt="areas">&lt;/p>
&lt;p>The Azure DevOps hierarchy of items (except for the Features, which I&amp;rsquo;ve not mapped) has been preserved and also the history of any item:&lt;/p>
&lt;p>&lt;img src="./06-history.png" alt="history">&lt;/p>
&lt;p>&lt;a href="#Intro">Back to top&lt;/a>&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>In a couple of days, we&amp;rsquo;ve migrated everything related to work items from Jira to Azure DevOps. Most of the time should be invested in configuring the JSON mappings and, for sure, to check for the errors caught during exporting items. Finally, after importing into AzDOs, you can start over and over, removing all the items under the pre-configured area/iteration, until everything looks good.&lt;/p>
&lt;p>&lt;a href="#Intro">Back to top&lt;/a>&lt;/p></description></item><item><title>Git Cherry-Pick for a strategic harvest</title><link>http://www.getlatestversion.eu/2020/07/git-cherry-pick-for-a-strategic-harvest/</link><pubDate>Mon, 13 Jul 2020 03:00:00 +0200</pubDate><author>Bartolomeo Lombardi</author><guid>http://www.getlatestversion.eu/2020/07/git-cherry-pick-for-a-strategic-harvest/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>IT companies which develop and sell software product are always focused on delivering new features to propose new versions of them to the final client, while still considering the maintenance of the previous release.
Generally, we are talking about projects of millions of lines of code that requires multiple developing teams located around the world with strong coordination and collaboration among them, in which it is necessary to handle multiple versions of the same product with a significant number of release branches. Fixing a bug on multiple branches is a complex task because the developer needs to backport the same fix in the various release branches possible with Git and it is called &amp;ldquo;cherry-picking&amp;rdquo;.&lt;/p>
&lt;h1 id="git-cherry-pick">Git cherry-pick&lt;/h1>
&lt;p>One of the most powerful Git commands is Cherry-pick. It takes one or more commits as input parameters and shifts them to a different branch, by creating a new commit in the process.&lt;/p>
&lt;p>Cherry-pick is commonly used in many Git workflows such as the Azure DevOps team’s, described in the following &lt;a href="https://devblogs.microsoft.com/devops/improving-azure-devops-cherry-picking/">article&lt;/a>, see the image reported below for a visual representation of the workflow.
&lt;img src="cherry-pick-workflow.jpg" alt="Cherry-Pick: way of working">&lt;/p>
&lt;p>Every time a developer works with many version of the same product it is essential to ensure all the reported bugs have been fixed in as many version as possible. Cherry-picking happens on the main branch to avoid deploying a new release with the same bug.&lt;/p>
&lt;h2 id="azure-devops-repos">Azure DevOps Repos&lt;/h2>
&lt;p>Azure DevOps provides cherry-picking of a completed Pull Request (PR) or of a single commit by clicking a dedicated button. The process will create a new PR with the same fix.
&lt;img src="azdo-cp.jpg" alt="Cherry-Pick Azure DevOps">&lt;/p>
&lt;p>Moreover, a &lt;a href="https://github.com/microsoft/azure-repos-pr-multi-cherry-pick">PR Multi-Cherry-Pick&lt;/a> is possible by means of an open source extension available on Azure DevOps Marketplace.&lt;/p>
&lt;p>If Azure DevOps displays a warning about the cherry-picking not being performed automatically (see image below) this is related to conflicts generated during the merge, therefore it has to be performed locally.
&lt;img src="azdo-cp-error.jpg" alt="Azure DevOps conflict errors">&lt;/p>
&lt;p>Many development environments integrated with Git can perform this local operation by graphic user interface. Best candidates are Visual Studio or VS Code.&lt;/p>
&lt;h1 id="git-cherry-pick---continue">Git cherry-pick &amp;ndash;continue&lt;/h1>
&lt;p>A few steps are needed to execute the following command &lt;a href="https://git-scm.com/docs/git-cherry-pick">git cherry-pick&lt;/a>.&lt;/p>
&lt;p>The first step is noting of the hash commit value to cherry-pick. If within a PR, the list of commits is available in the &lt;strong>Commits&lt;/strong> tab in Azure Repos:
&lt;img src="azdo-commits-tab.jpg" alt="Commit table on Azure DevOps">&lt;/p>
&lt;p>Once you are on the branch (&lt;code>git checkout &amp;lt;branch-name&amp;gt;&lt;/code>) that you want to commit, the following command must be executed &lt;code>git cherry-pick &amp;lt;commit&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Knowing that the cherry-pick command shown in the previous example can generate another conflict, once the code is merged manually you need to run the &lt;code>git cherry-pick --continue&lt;/code> to proceed. If you want to abort the process simply run git &lt;code>cherry-pick --abort&lt;/code>.&lt;/p>
&lt;p>All you need to do now is to perform &lt;code>git push&lt;/code> to align the remote.&lt;/p></description></item><item><title>Code dependencies: Binary Composition is not only a mathematics calculation</title><link>http://www.getlatestversion.eu/2020/05/code-dependencies-binary-composition-is-not-only-a-mathematics-calculation/</link><pubDate>Sun, 17 May 2020 16:00:00 +0200</pubDate><author>Bartolomeo Lombardi</author><guid>http://www.getlatestversion.eu/2020/05/code-dependencies-binary-composition-is-not-only-a-mathematics-calculation/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Over the years, the growing code base of application software with multiple teams working on the same product, has lead to break up the solution into multiple solutions. This has been done trying to reduce the time required for the build and for their integration, to ease Integrated Development Environment in opening hundreds of projects, and other.
The main consequence of having multiple solutions is binary composition.&lt;/p>
&lt;h1 id="what-is-binary-composition">What is binary composition?&lt;/h1>
&lt;p>Binary composition occurs when one or more solutions reference the compiled binaries of another solution. Let suppose it is needed to make the binaries of Solution B available to Solution A before Solution A can build successfully.&lt;/p>
&lt;p>&lt;img src="visual-studio-references.jpg" alt="image.png">&lt;/p>
&lt;p>If you are forced to commit the code together with the binaries produced by build in the repository&amp;hellip;Keep on reading :)&lt;/p>
&lt;h1 id="how-can-we-distribute-binaries">How can we distribute binaries?&lt;/h1>
&lt;p>We can make those binaries available in several ways.&lt;/p>
&lt;h2 id="git-repository">Git repository&lt;/h2>
&lt;p>A first possibility consists in committing them into a repository anytime a merge into the development/master branch by means of the Continuous Integration build pipeline is requested by a Pull Request. Of course, this increases the size of the repository introducing significant slowdown checkout times and performances. Imagine what could happen if teams work on different branches ending up using different versions of the same binaries creating merge conflicts.&lt;/p>
&lt;h2 id="file-share">File share&lt;/h2>
&lt;p>Another option consists in putting the binaries onto a file share. In this case, however, there is no index to find binaries quickly and there is no protection against overriding a version.&lt;/p>
&lt;h2 id="package-management-with-azure-artifacts">Package Management with Azure Artifacts&lt;/h2>
&lt;p>This should definitely be the most suitable solution because it allows putting binaries into NuGet (and other as npm, Maven, Python, and universal) packages making it possible for Solution A to reference these packages. Among the several advantages introduced by this methodology, in Continuous Integration Azure pipeline a NuGet published task can be added in order to make the update versioning procedure automatic and distributing it in a reliable way also.&lt;/p></description></item><item><title>Reducing the gap between operations and development using Azure DevOps</title><link>http://www.getlatestversion.eu/2020/05/reducing-the-gap-between-operations-and-development-using-azure-devops/</link><pubDate>Fri, 15 May 2020 11:30:00 +0200</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/2020/05/reducing-the-gap-between-operations-and-development-using-azure-devops/</guid><description>&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>As we all know, DevOps is culture. In a company that is going to adopt its practices and principles, everyone should be &amp;ldquo;on the same side&amp;rdquo;. Continuous improvement cannot be part of our work in IT if we wouldn&amp;rsquo;t reduce the gap between development and operations. People like me, that worked in the 90s, know that dev and ops were always isolated in silos and this was &amp;ldquo;the only&amp;rdquo; way that everyone followed as a suggestion taken from the market leaders. Ticketing systems and extreme bureaucracy acted as a man-in-the-middle between those silos, transforming each organization in two people-unaware endpoints.&lt;/p>
&lt;p>Speaking from a DevOps perspective, in such circumstances, a developer couldn&amp;rsquo;t know anything about how to deploy, where and how is an environment configured. On the other hand, an operation guy couldn&amp;rsquo;t get anything from a package in terms of what the application has been made for. Due to this gap we often see performance issues, underestimated hardware stuff and delayed releases. Last but not least, what about the lack of commitment and accountability of the employees working on the solution? In short, reducing such a gap is possible using a combination of DevOps culture and the right tools. We will see hereafter how my organization tries to do so using Azure DevOps.&lt;/p>
&lt;h2 id="scenario">Scenario&lt;/h2>
&lt;p>Let&amp;rsquo;s get started with our team (DevTeam hereafter), which is working with agile methodologies, composed of ten developers and a PO. A quick note, we are using a process decision framework called &lt;a href="https://www.disciplinedagileconsortium.org">Disciplined Agile&lt;/a>. Then, we have three operation professionals (OpsTeam from now on). Build and deploy pipelines already exist. Builds are hosted by &lt;a href="https://azure.microsoft.com/it-it/services/devops/">Azure DevOps (cloud)&lt;/a> and deploys are managed by &lt;a href="https://octopus.com/">Octopus Deploy&lt;/a>. Getting this, has been a difficult mission.&lt;/p>
&lt;p>Everything is related to infrastructure in terms of servers, operative systems, virtual hosts, DNS, firewalls, security and so on, is the responsibility of our OpsTeam. As a result, they do many tasks for managing the environments. Here comes the problem. DevTeams used to create tasks in a dedicated backlog, but OpsTeam didn&amp;rsquo;t. It&amp;rsquo;s not just a matter of end-of-pipeline tasks, but also tasks for their daily basis work.&lt;/p>
&lt;h2 id="our-solution">Our solution&lt;/h2>
&lt;p>Modify the tool, adapting its shape in order to fit in with that real scenario. A piece of cake, when you&amp;rsquo;re DevOps &amp;ldquo;inside&amp;rdquo;. How did we change Azure DevOps? Let&amp;rsquo;s describe what we did in three parts:&lt;/p>
&lt;h3 id="teams-in-azure-devops">Teams in Azure DevOps&lt;/h3>
&lt;p>To create a team in Azure DevOps is really a piece of cake (according to the latest releases). Just navigate to the options and select &lt;em>Teams&lt;/em>:&lt;/p>
&lt;p>&lt;img src="post01-01-team-on-azuredevops.png" alt="image.png">&lt;/p>
&lt;p>We can add many teams clicking on &lt;em>New team&lt;/em>:&lt;/p>
&lt;p>&lt;img src="post01-02-new-team.png" alt="image.png">&lt;/p>
&lt;p>We can set the team&amp;rsquo;s administrators, the permission set and an area under which every work item will be created. This area will be one of our best friends, especially when we will make our queries for gathering and analyzing the team&amp;rsquo;s related data. Additionally, also the other teams&amp;rsquo; members could create items with this area in order to make the OpsTeam aware of them.&lt;/p>
&lt;p>Team&amp;rsquo;s backlog
Now let&amp;rsquo;s navigate to Backlogs:&lt;/p>
&lt;p>&lt;img src="post01-03-backlogs.png" alt="image.png">&lt;/p>
&lt;p>Good! The new backlog has been created. Going on it, we will see the team&amp;rsquo;s drop-down as well as the one for iterations. Great feature!&lt;/p>
&lt;p>&lt;img src="post01-04-sprints.png" alt="image.png">&lt;/p>
&lt;p>Once created, we will see the teams&amp;rsquo; drop-down:&lt;/p>
&lt;p>&lt;img src="post01-05-team-switch.png" alt="image.png">&lt;/p>
&lt;h3 id="work-items">Work items&lt;/h3>
&lt;p>Now, let&amp;rsquo;s create a new work item type. We call it Ops item. Navigate to Process customization page:&lt;/p>
&lt;p>&lt;img src="post01-06-process.png" alt="image.png">&lt;/p>
&lt;p>Before adding the new work item, we must ensure that the process is already a custom process, otherwise, all the edits will be blocked as shown in the following picture:&lt;/p>
&lt;p>&lt;img src="post01-07-process-custom.png" alt="image.png">&lt;/p>
&lt;p>We&amp;rsquo;ve already created a SimplifiedScrum process. let&amp;rsquo;s add our item now:&lt;/p>
&lt;p>&lt;img src="post01-07-workitemtype.png" alt="image.png">&lt;/p>
&lt;p>Now we are going to modify the fields of the new type. Each team should be able to understand all the item&amp;rsquo;s properties. We will leave the item as is in this example. Then, we have to map the type to the backlog item list, since only the default work item types are shown initially. To do this, navigate to the Process customization page, Backlog Levels tab:&lt;/p>
&lt;p>&lt;img src="post01-08-process-add-workitemtype-1.png" alt="image.png">
&lt;img src="post01-09-process-add-workitemtype-2.png" alt="image.png">&lt;/p>
&lt;p>As we can see, we can also set the default item for our requirements backlog. Moreover, every Sprint backlog, based on iterations, will enable us to add the new Ops item:&lt;/p>
&lt;p>&lt;img src="post01-10-new-workitem.png" alt="image.png">&lt;/p>
&lt;h3 id="wrapping-up">Wrapping up&lt;/h3>
&lt;p>So, we&amp;rsquo;ve got a backlog for the IT Operations team&amp;rsquo;s members. Then, we&amp;rsquo;ve related it to their Azure DevOps team. Additionally, we&amp;rsquo;ve got a particular work item type (not mandatory, but really useful for querying it or adding it into dashboards) target of IT Operations&amp;rsquo; job and a dedicated Area Path. We can make many relationships between items of both our backlogs. Here is an example of how an activity can be managed and organized (extension: &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization">Work Item Visualize&lt;/a>):&lt;/p>
&lt;p>&lt;img src="post01-11-workitem-visualize.png" alt="image.png">&lt;/p>
&lt;p>As you can see, the Ops items are &lt;em>Successor&lt;/em> of the &amp;ldquo;development&amp;rdquo; Product backlog items. Indeed, the Ops Items will be finished after the PBI, typically. Think about creating s DNS or a network path to let the production app work in production.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>With this solution, we&amp;rsquo;re decoupling backlogs. Moreover, we&amp;rsquo;re isolating the management maintaining the relationships between work items that reside on different boards. At the same time, we&amp;rsquo;re making a strong synergy between Development and Operations.
Then, in a couple of clicks, we can switch teams and backlogs, using Azure DevOps Boards. We can track changes in both the departments, also for audit requirements. In my opinion, this helps the enterprise awareness and facilitates the continuous improvement of all the teams and any member&amp;rsquo;s skill.&lt;/p></description></item></channel></rss>