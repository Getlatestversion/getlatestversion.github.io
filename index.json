{"version":"https://jsonfeed.org/version/1","title":"Home on GetLatestVersion – Europe","description":"Recent content in Home on GetLatestVersion – Europe","home_page_url":"http://www.getlatestversion.eu/","feed_url":"http://www.getlatestversion.eu/index.json","items":[{"title":"Top 10 Pipeline mistakes","date_published":"2020-05-23T14:00:00+01:00","date_modified":"2020-05-23T14:00:00+01:00","id":"http://www.getlatestversion.eu/2020/05/top-10-pipeline-mistakes/","url":"http://www.getlatestversion.eu/2020/05/top-10-pipeline-mistakes/","author":{"name":"Giulio Vian"},"content_html":"\u003cp\u003eToday I am going to start a series of posts detailing common issues or mistakes in a DevOps context.\nI will try to refer to my experience and add some practical suggestion to identify and solve these issues.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start with my list of top 10 CI/CD pipeline issues.\u003c/p\u003e\n\u003ch2 id=\"the-list\"\u003eThe list\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e:\u003cbr\u003e\nPublished posts are in \u003cstrong\u003ebold\u003c/strong\u003e, the link for items in \u003cem\u003eitalic\u003c/em\u003e  does not work.\u003cbr\u003e\nLast update: 10 June 2020\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"../sloppy-secrets-handling\"\u003e\u003cem\u003eSloppy handling of Secrets\u003c/em\u003e\u003c/a\u003e \u0026ndash; leaking or hard-coding passwords, tokens or similar sensitive data;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../untraceable-artifacts\"\u003e\u003cem\u003eUntraceable artifacts\u003c/em\u003e\u003c/a\u003e \u0026ndash; when builds produce (or worse: deploy!) binaries of unknown source and version; this is a major red flag because it is cheap and easy to fix, but it is usually overlooked causing a major technical debt pile-up;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../too-specific\"\u003e\u003cem\u003eToo specific\u003c/em\u003e\u003c/a\u003e \u0026ndash; if your artifacts are not scrubbed from environment-specific dependencies, so they cannot be deployed to all environments;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../what-quality\"\u003e\u003cem\u003eWhat, quality?\u003c/em\u003e\u003c/a\u003e \u0026ndash; when your pipeline does not contain any check on quality, what do you expect as a result?;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../bleeding-edge\"\u003e\u003cem\u003eBleeding edge\u003c/em\u003e\u003c/a\u003e \u0026ndash; using the latest and greatest technology is not always a wise choice;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../galactic-builds\"\u003e\u003cem\u003eGalactic Builds\u003c/em\u003e\u003c/a\u003e \u0026ndash; far-reaching builds that slow teams down instead of helping them;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../flaky-builds\"\u003e\u003cstrong\u003eFlaky builds\u003c/strong\u003e\u003c/a\u003e \u0026ndash; builds generating unreproducible behaviours or random artefacts;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../too-much-of-a-good-thing\"\u003e\u003cem\u003eToo much of a good thing\u003c/em\u003e\u003c/a\u003e \u0026ndash; when you go too far to avoid the above mistakes, causing the fix to backfire;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../implicit-assumption\"\u003e\u003cem\u003eImplicit assumption\u003c/em\u003e\u003c/a\u003e \u0026ndash; any build that breaks when some undocumented environmental condition change;\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../untamed-plugins\"\u003e\u003cem\u003eUntamed plugins\u003c/em\u003e\u003c/a\u003e \u0026ndash; similar to the previous one, it is the nightmare of people that manage your build environments, when the build software uses too many, or even conflicting plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe list is not really complete: there is one more to add.\u003c/p\u003e\n\u003ch2 id=\"the-unforgivable-sin-having-no-pipeline\"\u003eThe unforgivable sin: having no pipeline\u003c/h2\u003e\n\u003cp\u003eThis is the ultimate sin of any developer: having no automated process of any kind.\u003cbr\u003e\nAt a minimum you can have a simple bash or PowerShell script to compile and publish your project.\nWith that it is going to be easy to integrate it in any of the most popular Continuous Integration tools: Jenkins, Azure DevOps, GitHub Actions, GitLab, TeamCity, etc.\u003cbr\u003e\nThat script should check for dependencies and label the produced artifacts with a version number. This will be discussed in detail in future posts.\u003cbr\u003e\nIf you do not need to automate the process for other people, at least, automate it for your future self!\u003c/p\u003e\n\u003cp\u003eSee you soon with the next episode.\u003c/p\u003e\n"},{"title":"Code dependencies: Binary Composition is not only a mathematics calculation","date_published":"2020-05-17T16:00:00+02:00","date_modified":"2020-05-17T16:00:00+02:00","id":"http://www.getlatestversion.eu/2020/05/code-dependencies-binary-composition-is-not-only-a-mathematics-calculation/","url":"http://www.getlatestversion.eu/2020/05/code-dependencies-binary-composition-is-not-only-a-mathematics-calculation/","author":{"name":"Bartolomeo Lombardi"},"content_html":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eOver the years, the growing code base of application software with multiple teams working on the same product, has lead to break up the solution into multiple solutions. This has been done trying to reduce the time required for the build and for their integration, to ease Integrated Development Environment in opening hundreds of projects, and other.\nThe main consequence of having multiple solutions is binary composition.\u003c/p\u003e\n\u003ch1 id=\"what-is-binary-composition\"\u003eWhat is binary composition?\u003c/h1\u003e\n\u003cp\u003eBinary composition occurs when one or more solutions reference the compiled binaries of another solution. Let suppose it is needed to make the binaries of Solution B available to Solution A before Solution A can build successfully.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"visual-studio-references.jpg\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you are forced to commit the code together with the binaries produced by build in the repository\u0026hellip;Keep on reading :)\u003c/p\u003e\n\u003ch1 id=\"how-can-we-distribute-binaries\"\u003eHow can we distribute binaries?\u003c/h1\u003e\n\u003cp\u003eWe can make those binaries available in several ways.\u003c/p\u003e\n\u003ch2 id=\"git-repository\"\u003eGit repository\u003c/h2\u003e\n\u003cp\u003eA first possibility consists in committing them into a repository anytime a merge into the development/master branch by means of the Continuous Integration build pipeline is requested by a Pull Request. Of course, this increases the size of the repository introducing significant slowdown checkout times and performances. Imagine what could happen if teams work on different branches ending up using different versions of the same binaries creating merge conflicts.\u003c/p\u003e\n\u003ch2 id=\"file-share\"\u003eFile share\u003c/h2\u003e\n\u003cp\u003eAnother option consists in putting the binaries onto a file share. In this case, however, there is no index to find binaries quickly and there is no protection against overriding a version.\u003c/p\u003e\n\u003ch2 id=\"package-management-with-azure-artifacts\"\u003ePackage Management with Azure Artifacts\u003c/h2\u003e\n\u003cp\u003eThis should definitely be the most suitable solution because it allows putting binaries into NuGet (and other as npm, Maven, Python, and universal) packages making it possible for Solution A to reference these packages. Among the several advantages introduced by this methodology, in Continuous Integration Azure pipeline a NuGet published task can be added in order to make the update versioning procedure automatic and distributing it in a reliable way also.\u003c/p\u003e\n"},{"title":"Reducing the gap between operations and development using Azure DevOps","date_published":"2020-05-15T11:30:00+02:00","date_modified":"2020-05-15T11:30:00+02:00","id":"http://www.getlatestversion.eu/2020/05/reducing-the-gap-between-operations-and-development-using-azure-devops/","url":"http://www.getlatestversion.eu/2020/05/reducing-the-gap-between-operations-and-development-using-azure-devops/","author":{"name":"Alessandro Alpi"},"content_html":"\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eAs we all know, DevOps is culture. In a company that is going to adopt its practices and principles, everyone should be \u0026ldquo;on the same side\u0026rdquo;. Continuous improvement cannot be part of our work in IT if we wouldn\u0026rsquo;t reduce the gap between development and operations. People like me, that worked in the 90s, know that dev and ops were always isolated in silos and this was \u0026ldquo;the only\u0026rdquo; way that everyone followed as a suggestion taken from the market leaders. Ticketing systems and extreme bureaucracy acted as a man-in-the-middle between those silos, transforming each organization in two people-unaware endpoints.\u003c/p\u003e\n\u003cp\u003eSpeaking from a DevOps perspective, in such circumstances, a developer couldn\u0026rsquo;t know anything about how to deploy, where and how is an environment configured. On the other hand, an operation guy couldn\u0026rsquo;t get anything from a package in terms of what the application has been made for. Due to this gap we often see performance issues, underestimated hardware stuff and delayed releases. Last but not least, what about the lack of commitment and accountability of the employees working on the solution? In short, reducing such a gap is possible using a combination of DevOps culture and the right tools. We will see hereafter how my organization tries to do so using Azure DevOps.\u003c/p\u003e\n\u003ch2 id=\"scenario\"\u003eScenario\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s get started with our team (DevTeam hereafter), which is working with agile methodologies, composed of ten developers and a PO. A quick note, we are using a process decision framework called \u003ca href=\"https://www.disciplinedagileconsortium.org\"\u003eDisciplined Agile\u003c/a\u003e. Then, we have three operation professionals (OpsTeam from now on). Build and deploy pipelines already exist. Builds are hosted by \u003ca href=\"https://azure.microsoft.com/it-it/services/devops/\"\u003eAzure DevOps (cloud)\u003c/a\u003e and deploys are managed by \u003ca href=\"https://octopus.com/\"\u003eOctopus Deploy\u003c/a\u003e. Getting this, has been a difficult mission.\u003c/p\u003e\n\u003cp\u003eEverything is related to infrastructure in terms of servers, operative systems, virtual hosts, DNS, firewalls, security and so on, is the responsibility of our OpsTeam. As a result, they do many tasks for managing the environments. Here comes the problem. DevTeams used to create tasks in a dedicated backlog, but OpsTeam didn\u0026rsquo;t. It\u0026rsquo;s not just a matter of end-of-pipeline tasks, but also tasks for their daily basis work.\u003c/p\u003e\n\u003ch2 id=\"our-solution\"\u003eOur solution\u003c/h2\u003e\n\u003cp\u003eModify the tool, adapting its shape in order to fit in with that real scenario. A piece of cake, when you\u0026rsquo;re DevOps \u0026ldquo;inside\u0026rdquo;. How did we change Azure DevOps? Let\u0026rsquo;s describe what we did in three parts:\u003c/p\u003e\n\u003ch3 id=\"teams-in-azure-devops\"\u003eTeams in Azure DevOps\u003c/h3\u003e\n\u003cp\u003eTo create a team in Azure DevOps is really a piece of cake (according to the latest releases). Just navigate to the options and select \u003cem\u003eTeams\u003c/em\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-01-team-on-azuredevops.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWe can add many teams clicking on \u003cem\u003eNew team\u003c/em\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-02-new-team.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWe can set the team\u0026rsquo;s administrators, the permission set and an area under which every work item will be created. This area will be one of our best friends, especially when we will make our queries for gathering and analyzing the team\u0026rsquo;s related data. Additionally, also the other teams\u0026rsquo; members could create items with this area in order to make the OpsTeam aware of them.\u003c/p\u003e\n\u003cp\u003eTeam\u0026rsquo;s backlog\nNow let\u0026rsquo;s navigate to Backlogs:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-03-backlogs.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eGood! The new backlog has been created. Going on it, we will see the team\u0026rsquo;s drop-down as well as the one for iterations. Great feature!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-04-sprints.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eOnce created, we will see the teams\u0026rsquo; drop-down:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-05-team-switch.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"work-items\"\u003eWork items\u003c/h3\u003e\n\u003cp\u003eNow, let\u0026rsquo;s create a new work item type. We call it Ops item. Navigate to Process customization page:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-06-process.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eBefore adding the new work item, we must ensure that the process is already a custom process, otherwise, all the edits will be blocked as shown in the following picture:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-07-process-custom.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ve already created a SimplifiedScrum process. let\u0026rsquo;s add our item now:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-07-workitemtype.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eNow we are going to modify the fields of the new type. Each team should be able to understand all the item\u0026rsquo;s properties. We will leave the item as is in this example. Then, we have to map the type to the backlog item list, since only the default work item types are shown initially. To do this, navigate to the Process customization page, Backlog Levels tab:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-08-process-add-workitemtype-1.png\" alt=\"image.png\"\u003e\n\u003cimg src=\"post01-09-process-add-workitemtype-2.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eAs we can see, we can also set the default item for our requirements backlog. Moreover, every Sprint backlog, based on iterations, will enable us to add the new Ops item:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-10-new-workitem.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\u003cp\u003eSo, we\u0026rsquo;ve got a backlog for the IT Operations team\u0026rsquo;s members. Then, we\u0026rsquo;ve related it to their Azure DevOps team. Additionally, we\u0026rsquo;ve got a particular work item type (not mandatory, but really useful for querying it or adding it into dashboards) target of IT Operations\u0026rsquo; job and a dedicated Area Path. We can make many relationships between items of both our backlogs. Here is an example of how an activity can be managed and organized (extension: \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization\"\u003eWork Item Visualize\u003c/a\u003e):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"post01-11-workitem-visualize.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003eAs you can see, the Ops items are \u003cem\u003eSuccessor\u003c/em\u003e of the \u0026ldquo;development\u0026rdquo; Product backlog items. Indeed, the Ops Items will be finished after the PBI, typically. Think about creating s DNS or a network path to let the production app work in production.\u003c/p\u003e\n\u003ch2 id=\"conclusions\"\u003eConclusions\u003c/h2\u003e\n\u003cp\u003eWith this solution, we\u0026rsquo;re decoupling backlogs. Moreover, we\u0026rsquo;re isolating the management maintaining the relationships between work items that reside on different boards. At the same time, we\u0026rsquo;re making a strong synergy between Development and Operations.\nThen, in a couple of clicks, we can switch teams and backlogs, using Azure DevOps Boards. We can track changes in both the departments, also for audit requirements. In my opinion, this helps the enterprise awareness and facilitates the continuous improvement of all the teams and any member\u0026rsquo;s skill.\u003c/p\u003e\n"},{"title":"About","date_published":"0001-01-01T00:00:00Z","date_modified":"0001-01-01T00:00:00Z","id":"http://www.getlatestversion.eu/about/","url":"http://www.getlatestversion.eu/about/","content_html":"\u003cp\u003e\u003cimg src=\"/images/320px-Flag_of_Europe.svg.png\" alt=\"Europe flag\"\u003e\u003c/p\u003e\n\u003ch2 id=\"about-us\"\u003eAbout Us\u003c/h2\u003e\n\u003cp\u003eGetLatestVersion.eu stems from GetLatestVersion.it, the successful Italian community specialised on DevOps, Application Lifecycle Management (ALM) and Software Development Life-Cycle (SDLC).\u003c/p\u003e\n\u003ch2 id=\"what-we-do\"\u003eWhat we do\u003c/h2\u003e\n\u003cp\u003eWe publish posts and articles on DevOps, Agile, tools, design, implementation techniques.\nOur \u003ca href=\"https://www.youtube.com/GetLatestVersion\"\u003eYouTube channel\u003c/a\u003e hosts useful video of different kind: short introductions to a topic or tool, longer presentation on experiences and conference sessions.\nIn addition, we organise events in person and online on DevOps, Agile, ALM and SDLC topics.\u003c/p\u003e\n"},{"title":"Privacy","date_published":"0001-01-01T00:00:00Z","date_modified":"0001-01-01T00:00:00Z","id":"http://www.getlatestversion.eu/page/privacy/","url":"http://www.getlatestversion.eu/page/privacy/","content_html":"\u003ch2 id=\"list-of-cookies-used-in-this-site\"\u003eList of Cookies used in this site\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eGoogle Analytics cookies\u003c/strong\u003e: __utma, __utmb, __utmc, __utmv, __utmz, used to gather site statistic usage. You can read more info on Google Policies on: How Google uses data when you use our partners’ sites or apps and Safeguarding your Data.\u003c/p\u003e\n"},{"title":"Search","date_published":"0001-01-01T00:00:00Z","date_modified":"0001-01-01T00:00:00Z","id":"http://www.getlatestversion.eu/search/","url":"http://www.getlatestversion.eu/search/","content_html":"\u003cp class=\"error message js-hidden\"\u003eYou must have Javascript enabled to use this function.\u003c/p\u003e\n\u003cp class=\"search-loading status message hidden\"\u003eLoading search index…\u003c/p\u003e\n\n\u003cdiv class=\"search-input hidden\"\u003e\n  \u003cform id=\"search-form\" class=\"search-form\" action=\"#\" method=\"post\" accept-charset=\"UTF-8\" role=\"search\"\u003e\n    \u003clabel for=\"query\" class=\"visually-hidden\"\u003eSearch\u003c/label\u003e\n    \u003cinput type=\"search\" id=\"query\" name=\"query\" class=\"search-text\" placeholder=\"Enter the terms you wish to search for.\" maxlength=\"128\"\u003e\n    \u003cbutton type=\"submit\" name=\"submit\" class=\"form-submit\" \u003eSearch\u003c/button\u003e\n  \u003c/form\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"search-results\"\u003e\u003c/div\u003e\n\n\u003ctemplate\u003e\n  \u003carticle class=\"search-result list-view\"\u003e\n    \u003cheader\u003e\n      \u003ch2 class=\"title title-submitted\"\u003e\u003ca href=\"#\"\u003eTitle here\u003c/a\u003e\u003c/h2\u003e\n      \u003cdiv class=\"submitted\"\u003e\u003ctime class=\"created-date\"\u003eDate here\u003c/time\u003e\u003c/div\u003e\n    \u003c/header\u003e\n    \u003cdiv class=\"content\"\u003eSummary here\u003c/div\u003e\n  \u003c/article\u003e\n\u003c/template\u003e\n\n"}]}