<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on GetLatestVersion – Europe</title><link>http://www.getlatestversion.eu/</link><description>Recent content in Home on GetLatestVersion – Europe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 May 2020 14:00:00 +0100</lastBuildDate><atom:link href="http://www.getlatestversion.eu/index.xml" rel="self" type="application/rss+xml"/><item><title>Top 10 Pipeline mistakes</title><link>http://www.getlatestversion.eu/2020/05/top-10-pipeline-mistakes/</link><pubDate>Sat, 23 May 2020 14:00:00 +0100</pubDate><author>Giulio Vian</author><guid>http://www.getlatestversion.eu/2020/05/top-10-pipeline-mistakes/</guid><description>&lt;p>Today I am going to start a series of posts detailing common issues or mistakes in a DevOps context.
I will try to refer to my experience and add some practical suggestion to identify and solve these issues.&lt;/p>
&lt;p>Let&amp;rsquo;s start with my list of top 10 CI/CD pipeline issues.&lt;/p>
&lt;h2 id="the-list">The list&lt;/h2>
&lt;p>&lt;strong>NOTE&lt;/strong>: the links will work only when the matching post is published.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="../sloppy-secrets-handling">Sloppy handling of Secrets&lt;/a> &amp;ndash; leaking or hard-coding passwords, tokens or similar sensitive data;&lt;/li>
&lt;li>&lt;a href="../untraceable-artifacts">Untraceable artifacts&lt;/a> &amp;ndash; when builds produce (or worse: deploy!) binaries of unknown source and version; this is a major red flag because it is cheap and easy to fix, but it is usually overlooked causing a major technical debt pile-up;&lt;/li>
&lt;li>&lt;a href="../too-specific">Too specific&lt;/a> &amp;ndash; if your artifacts are not scrubbed from environment-specific dependencies, so they cannot be deployed to all environments;&lt;/li>
&lt;li>&lt;a href="../what-quality">What, quality?&lt;/a> &amp;ndash; when your pipeline does not contain any check on quality, what do you expect as a result?;&lt;/li>
&lt;li>&lt;a href="../bleeding-edge">Bleeding edge&lt;/a> &amp;ndash; using the latest and greatest technology is not always a wise choice;&lt;/li>
&lt;li>&lt;a href="../galactic-builds">Galactic Builds&lt;/a> &amp;ndash; far-reaching builds that slow teams down instead of helping them;&lt;/li>
&lt;li>&lt;a href="../flaky-builds">Flaky builds&lt;/a> &amp;ndash; builds generating unreproducible behaviours or random artefacts;&lt;/li>
&lt;li>&lt;a href="../too-much-of-a-good-thing">Too much of a good thing&lt;/a> &amp;ndash; when you go too far to avoid the above mistakes, causing the fix to backfire;&lt;/li>
&lt;li>&lt;a href="../implicit-assumption">Implicit assumption&lt;/a> &amp;ndash; any build that breaks when some undocumented environmental condition change;&lt;/li>
&lt;li>&lt;a href="../untamed-plugins">Untamed plugins&lt;/a> &amp;ndash; similar to the previous one, it is the nightmare of people that manage your build environments, when the build software uses too many, or even conflicting plugins.&lt;/li>
&lt;/ol>
&lt;p>The list is not really complete: there are more.&lt;/p>
&lt;h2 id="the-unforgivable-sin-having-no-pipeline">The unforgivable sin: having no pipeline&lt;/h2>
&lt;p>This is the ultimate sin of any developer: having no automated process of any kind.&lt;br>
At a minimum you can have a simple bash or PowerShell script to compile and publish your project.
With that it is going to be easy to integrate it in any of the most popular Continuous Integration tools: Jenkins, Azure DevOps, GitHub Actions, GitLab, TeamCity, etc.&lt;br>
That script should check for dependencies and label the produced artifacts with a version number. This will be discussed in detail in future posts.&lt;br>
If you do not need to automate the process for other people, at least, automate it for your future self!&lt;/p>
&lt;p>See you soon with the next episode.&lt;/p></description></item><item><title>Code dependencies: Binary Composition is not only a mathematics calculation</title><link>http://www.getlatestversion.eu/2020/05/code-dependencies-binary-composition-is-not-only-a-mathematics-calculation/</link><pubDate>Sun, 17 May 2020 16:00:00 +0200</pubDate><author>Bartolomeo Lombardi</author><guid>http://www.getlatestversion.eu/2020/05/code-dependencies-binary-composition-is-not-only-a-mathematics-calculation/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Over the years, the growing code base of application software with multiple teams working on the same product, has lead to break up the solution into multiple solutions. This has been done trying to reduce the time required for the build and for their integration, to ease Integrated Development Environment in opening hundreds of projects, and other.
The main consequence of having multiple solutions is binary composition.&lt;/p>
&lt;h1 id="what-is-binary-composition">What is binary composition?&lt;/h1>
&lt;p>Binary composition occurs when one or more solutions reference the compiled binaries of another solution. Let suppose it is needed to make the binaries of Solution B available to Solution A before Solution A can build successfully.&lt;/p>
&lt;p>&lt;img src="visual-studio-references.jpg" alt="image.png">&lt;/p>
&lt;p>If you are forced to commit the code together with the binaries produced by build in the repository&amp;hellip;Keep on reading :)&lt;/p>
&lt;h1 id="how-can-we-distribute-binaries">How can we distribute binaries?&lt;/h1>
&lt;p>We can make those binaries available in several ways.&lt;/p>
&lt;h2 id="git-repository">Git repository&lt;/h2>
&lt;p>A first possibility consists in committing them into a repository anytime a merge into the development/master branch by means of the Continuous Integration build pipeline is requested by a Pull Request. Of course, this increases the size of the repository introducing significant slowdown checkout times and performances. Imagine what could happen if teams work on different branches ending up using different versions of the same binaries creating merge conflicts.&lt;/p>
&lt;h2 id="file-share">File share&lt;/h2>
&lt;p>Another option consists in putting the binaries onto a file share. In this case, however, there is no index to find binaries quickly and there is no protection against overriding a version.&lt;/p>
&lt;h2 id="package-management-with-azure-artifacts">Package Management with Azure Artifacts&lt;/h2>
&lt;p>This should definitely be the most suitable solution because it allows putting binaries into NuGet (and other as npm, Maven, Python, and universal) packages making it possible for Solution A to reference these packages. Among the several advantages introduced by this methodology, in Continuous Integration Azure pipeline a NuGet published task can be added in order to make the update versioning procedure automatic and distributing it in a reliable way also.&lt;/p></description></item><item><title>About</title><link>http://www.getlatestversion.eu/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.getlatestversion.eu/about/</guid><description>&lt;p>&lt;img src="http://www.getlatestversion.eu/images/320px-Flag_of_Europe.svg.png" alt="Europe flag">&lt;/p>
&lt;h2 id="about-us">About Us&lt;/h2>
&lt;p>GetLatestVersion.eu stems from GetLatestVersion.it, the successful Italian community specialised on DevOps, Application Lifecycle Management (ALM) and Software Development Life-Cycle (SDLC).&lt;/p>
&lt;h2 id="what-we-do">What we do&lt;/h2>
&lt;p>We publish posts and articles on DevOps, Agile, tools, design, implementation techniques.
Our &lt;a href="https://www.youtube.com/GetLatestVersion">YouTube channel&lt;/a> hosts useful video of different kind: short introductions to a topic or tool, longer presentation on experiences and conference sessions.
In addition, we organise events in person and online on DevOps, Agile, ALM and SDLC topics.&lt;/p></description></item><item><title>Privacy</title><link>http://www.getlatestversion.eu/page/privacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.getlatestversion.eu/page/privacy/</guid><description>&lt;h2 id="list-of-cookies-used-in-this-site">List of Cookies used in this site&lt;/h2>
&lt;p>&lt;strong>Google Analytics cookies&lt;/strong>: __utma, __utmb, __utmc, __utmv, __utmz, used to gather site statistic usage. You can read more info on Google Policies on: How Google uses data when you use our partners’ sites or apps and Safeguarding your Data.&lt;/p></description></item><item><title>Search</title><link>http://www.getlatestversion.eu/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.getlatestversion.eu/search/</guid><description>&lt;p class="error message js-hidden">You must have Javascript enabled to use this function.&lt;/p>
&lt;p class="search-loading status message hidden">Loading search index…&lt;/p>
&lt;div class="search-input hidden">
&lt;form id="search-form" class="search-form" action="#" method="post" accept-charset="UTF-8" role="search">
&lt;label for="query" class="visually-hidden">Search&lt;/label>
&lt;input type="search" id="query" name="query" class="search-text" placeholder="Enter the terms you wish to search for." maxlength="128">
&lt;button type="submit" name="submit" class="form-submit" >Search&lt;/button>
&lt;/form>
&lt;/div>
&lt;div class="search-results">&lt;/div>
&lt;template>
&lt;article class="search-result list-view">
&lt;header>
&lt;h2 class="title title-submitted">&lt;a href="#">Title here&lt;/a>&lt;/h2>
&lt;div class="submitted">&lt;time class="created-date">Date here&lt;/time>&lt;/div>
&lt;/header>
&lt;div class="content">Summary here&lt;/div>
&lt;/article>
&lt;/template></description></item></channel></rss>