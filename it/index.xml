<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on GetLatestVersion – Italia</title><link>http://www.getlatestversion.eu/it/</link><description>Recent content in Home on GetLatestVersion – Italia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Oct 2020 08:30:00 +0200</lastBuildDate><atom:link href="http://www.getlatestversion.eu/it/index.xml" rel="self" type="application/rss+xml"/><item><title>Quelli di GLV - Episodio 1 - Due chiacchiere con Alessandro Alpi</title><link>http://www.getlatestversion.eu/it/2020/10/quelli-di-glv-episodio-1-due-chiacchiere-con-alessandro-alpi/</link><pubDate>Thu, 29 Oct 2020 08:30:00 +0200</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/it/2020/10/quelli-di-glv-episodio-1-due-chiacchiere-con-alessandro-alpi/</guid><description>&lt;h1 id="introduzione">Introduzione&lt;/h1>
&lt;p>La nuova serie &amp;ldquo;Quelli di GLV&amp;rdquo; è iniziata. Insieme a Giuliano Latini si è parlato del topic DevOps su database. Qui di seguito il transcript dell&amp;rsquo;intervista e il link a youtube:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/3F1a1q_S2YU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="transcript">Transcript&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Qual è la differenza più sostanziale tra codice e database?&lt;/strong>&lt;/p>
&lt;p>sì, molto spesso arriviamo a chiederci questa cosa perché sembra che esistano tutte queste differenze tra database e codice in realtà non è poi così vero. Tuttavia, mi piace dare fondamentalmente due risposte: La prima, è che dal punto di vista di strutture e in generale definizione di quello che sono gli oggetti e database non viene praticamente neanche una, sempre parlando di file che vengono salvati su un source control. la seconda, invece è che da tutti gli altri punti di vista siamo all&amp;rsquo;estremo opposto. Infatti, abbiamo caratteristiche come persistenza, e quindi tutto quello che ne deriva in termini di regressione e potenziale perdita di dati, e in generale mancanza di compilazione, senza la quale è molto spesso è difficile controllare se tutto quanto funzionerà, se pure ci siano dei pattern da seguire. In definitiva, se vogliamo dare una sola risposta, possiamo dire che dal punto di vista di controllo di codice sorgente non abbiamo poi tutte queste differenze, mentre ne abbiamo tante quando si arriva allo step di deploy e quindi all&amp;rsquo;ambiente.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Quali sono i primi due scenari tipici che ritrovi spesso?&lt;/strong>&lt;/p>
&lt;p>Legandosi un pochino alla domanda di prima, nel flusso intero che va da sviluppo a produzione diciamo, direi che il &lt;strong>primo scenario&lt;/strong> è quello appunto in cui esiste un server centrale di sviluppo, che in realtà è anche il server di produzione. è vero, sicuramente, che a volte ci sono anche problemi economici per quanto riguarda le licenze, però questa pratica è sicuramente sconsigliata, perché si finisce in un mondo in cui conflitti, violazioni di accesso ai dati, rischi di non poter configurare i permessi a modo e quindi di buttar via completamente il lavoro di produzione (senza volerlo, ovviamente). Il problema è che molto spesso è così e, in tali casi, non si riesce a raggiungere facilmente nemmeno un primo step di migrazione, che prevederebbe quantomeno in controllo del codice sorgente isolato.
Il &lt;strong>secondo scenario&lt;/strong> più comune, è quello in cui non è possibile fare deploy in produzione, se non passando da un cosiddetto gatekeeper. È piuttosto comune, infatti, avere a che fare con aziende che non hanno direttamente la gestione dell&amp;rsquo;infrastruttura di produzione. In quel caso, può succedere che non ci sia neanche un canale telematico. Le uniche possibilità sono quelle di mandare un pacchetto da far eseguire ai responsabili dall&amp;rsquo;altra parte. Potete capire qui la natura dei problemi che si presentano e anche se l&amp;rsquo;azienda con cui si lavora è disponibile a fare di tutto, ci sono dei blocchi burocratici anche, insuperabili. il concetto però è sempre lo stesso, sulla pipeline si tende a dimenticare o a voler ignorare, la parte dei dati, rimandando tutto al gestioni speciali, se presenti.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accompagnando aziende, dove trovano più problemi nel cambio di approccio?&lt;/strong>&lt;/p>
&lt;p>questa è una domanda molto interessante, perché cominciamo a parlare di scenari reali e di come le persone si sono attrezzate per gestire i propri sistemi, quindi di esperienze dirette. e sai come sono interessato a capire come le persone risolvano i problemi all&amp;rsquo;interno delle loro realtà. Di difficoltà sono incontrano tantissime soprattutto quando l&amp;rsquo;azienda che vado a seguire non è minimamente avvezza a tutti quei concetti che ruotano intorno al topic in questione che è devops. Però se volessi fare una classifica delle prime tre, direi che sicuramente &lt;strong>il primo problema&lt;/strong> è la mancanza di conoscenza del glossario tecnico riguardanti le pratiche suggerite. Quindi molto spesso è fondamentale trovarsi ore a discutere di termini con i quali si lavorerà nelle giornate a venire. sembra scontata questa cosa, ma credo che non riguardi soltanto il mondo dei database, bensì un po&amp;rsquo; tutto il mondo della IT. Certo, essendo stato il mondo del database visto sempre come statico e un po&amp;rsquo; più indietro rispetto a quello dello sviluppo (non dimentichiamo che con &amp;ldquo;mondo dati&amp;quot;si intende sia sviluppo che parte operations commerciale per il resto dei dipartimenti IT) è sicuramente più probabile trovare anche meno documentazione mentre il mondo dello sviluppo è sommerso di nuovi termini regolarmente. &lt;strong>In seconda posizione&lt;/strong> invece, una volta superato il problema del glossario, direi che c'è, come la chiamo io, la mania del server centrale di sviluppo, anche conosciuto come mancanza di una sandbox per il database. E quindi, da qui, nascono una marea di problemi che rendono molto più complesso il passaggio, ad esempio, verso una continuous integration. Ovviamente non ci fermiamo a questo, ma diciamo che il primo problema che si verifica e che tipicamente blocca le idee del tuo interlocutore, perché qui c'è da migrare veramente tanto, sia in termini di cultura che in termini di infrastruttura e procedure. &lt;strong>Al terzo posto&lt;/strong>, un grande classico, la mania di voler usare uno strumento a priori. Molto spesso si parte con idee e per concetti e, una volta entrati, si cambia completamente il punto di vista. Anche perché, uno strumento deve essere a supporto, non dimentichiamolo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Come reagiscono i DBA o i DB Dev abituati a stare su IDE dedicati al solo database?&lt;/strong>&lt;/p>
&lt;p>Hai detto bene, c'è sempre una forte comunità di persone che lavorano solo sul database e solo in termini di sviluppo. Non sto parlando di data scientist, ma di figure che si dedicano a sviluppare su database, come accade per store procedure e funzioni. Purtroppo non riesco a distinguere uno sviluppatore che faccia solo questo rispetto a una persona che sviluppi semplicemente back-end, perciò, anche in questo caso, mi sento di sconsigliare la creazione di un silo isolato. Tornando a noi, ci sono tante persone impiegate su management studio, per capirci. Diciamo che molto spesso sono spaventate quando si approccia alla migrazione. Caso diverso e invece quello di sviluppatori abituati ai progetti database in visual studio. E ancora più distante è il caso delle nuove leve abituate a usare i nuovi strumenti come visual studio code o Azure data studio. Diciamo che per tutti questi casi, in maniera più o meno indolore, possiamo ridurre la curva di apprendimento e rendere più tranquilli i lavoratori di questo tipo approcciando allo strumento giusto quantomeno in un primo step per poi arrivare ad avere confidenza con un po&amp;rsquo; tutto il mondo degli strumenti DevOps. quindi chi più chi meno, la paura c'è, ma è più quella del cambiamento.
Per i dba é un po&amp;rsquo; diverso. Un amministratore utilizza tanti strumenti è l&amp;rsquo;obiettivo finale è quello di stare sulla produzione. perciò mi sento di dire che una figura di questo tipo molto spesso è alleggerita dall&amp;rsquo;automazione, poiché cadendo i famosi gatekeeper cala anche il lavoro di deploy in produzione. Aumenta quello del controllo della qualità e della monitorizzazione dei sistemi, che sempre fa parte di devops. In definitiva, non è uno scoglio impossibile da superare, certamente impegnativo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Come cambia la gestione del DB e quindi il ruolo del DBA in una trasformazione verso DevOps?&lt;/strong>&lt;/p>
&lt;p>Bella domanda. Anche perché non è detto che il dba sia da tutti considerato allo stesso modo. Ci sono aziende per cui un dba è la persona che fa i rilasci, altre per cui è quello che sviluppa le stored procedure e &amp;ldquo;conosci un po&amp;rsquo; di più il database&amp;rdquo;, altri ancora invece, in cui non solo è tutto quanto detto prima ma è anche colui che controlla i sistemi di produzione via monitoring. Fin dall&amp;rsquo;inizio della mia carriera, che al contrario di quanto si può pensare è stata da sviluppatore full stack, costretto a diventarlo dalla natura della nostra attività negli anni in cui ho iniziato, ho sempre ricercato un lavoro che fosse effettivamente quello per cui la definizione di dba nasce. Quindi parliamo di teoria di database e topologie, design e architettura, conoscenza di sottosistemi e non solo del servizio database, monitoring e ottimizzazione delle performance, ecc. È stata veramente dura poter fare tutte queste cose e devo dire che ci sono riuscito solo quando sono andato a lavorare all&amp;rsquo;estero. Sono allora ho iniziato anche ad aggiungere le pratiche DevOps. Quindi il ruolo del dba, seguendo la definizione, vedrebbe il suo lavoro aumentato in termini di cultura devops e diminuito in termini di attività. L&amp;rsquo;attenzione viene spostata sulla qualità, sulle decisioni per la parte di automazione, sulla monitorizzazione dei sistemi non classica, ma proattiva (con questo intendo avere a che fare con strumenti e API utili a rimuovere gli interventi manuali). Se si parla delle figure di cui ho parlato poco fa, ovviamente cambia tutto. Si tratta quindi di capire che cosa si intende per dba.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>La fiducia nei rilasci?&lt;/strong>&lt;/p>
&lt;p>Esatto, proprio in base a quanto appena detto, in teoria, la fiducia dovrebbe piano piano arrivare, dal momento in cui le procedure scritte per l&amp;rsquo;automazione cominciano a non farsi più sentire. Praticamente, quando ci si dimentica di una cosa e questa continua ad andare senza problemi, siamo arrivati al punto desiderato. Ma anche in questo caso, il problema è la paura del cambiamento, non tanto la fiducia in uno strumento. Molto spesso si parte prevenuti pensando presuntuosamente che le proprie procedure funzioneranno comunque è sempre meglio di un sistema progettato allo scopo. E probabilmente all&amp;rsquo;inizio è anche vero. Ma dopo una fase di verifica, correzione e controllo costante, lo strumento lo possiamo dimenticare, mentre un elemento scritto da noi che non prevedeva casi futuri poiché è troppo custom, sarà sempre fonte di ulteriore lavoro di fix e potenziale regressione anche sulla linea di deploy. Il rilascio a database é decisamente impegnativo, non dimentichiamo i punti di diversità detti prima. Qui abbiamo data loss, continuità di business, qualità del dato, persistenza. Insomma, é delicata la faccenda. Quindi si può facilmente capire il motivo della scarsa fiducia. É comprensibile. Però, una volta pensata una pipeline semplice ed efficace, credetemi, dormirete sonni molto più tranquilli e avrete sempre meno bisogno di tempo o meglio, creerete sempre meno debito tecnico.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consiglio finale?&lt;/strong>&lt;/p>
&lt;p>Solo uno? Difficile. Lasciami dare almeno un consiglio per la parte di sviluppo e uno per la parte deploy, per favore. Quando iniziamo a sviluppare una soluzione e abbiamo una parte di database, qualunque sia la sua natura, cerchiamo di entrare nel mood del mondo dello sviluppo. Con ciò intendo: ragionare in termini di repository, source control e branching style, strumenti di sviluppo e contribuzioni a librerie open source. Il tutto in maniera collaborativa, con lo scopo di dare quanto prima la propria versione del codice modificato, pensando sempre a come andremo &amp;ldquo;in produzione&amp;rdquo;.
Quando facciamo il passo verso il rilascio, impostiamo la nostra mente sulla qualità e gli ambienti. Perciò: prevenire regressioni con pratiche di test automatici, provare prima dei rilasci i nostri script di deploy automaticamente, definire i concetti di artefatti e capire l&amp;rsquo;esigenza dell&amp;rsquo;ambiente verso cui andiamo a fare deploy. Orientati a seguire che quanto appena rilasciato funzioni perfettamente.
Infine, trasversalmente, impariamo ad approcciare in maniera iterativa alle nostre implementazioni e in ultimo, ma non per importanza, parlare tutti la stessa lingua, anche coi clienti. Ma questo va fuori dal topic dell&amp;rsquo;intervista, magari uno di noi parlerà di Domani Driven Design.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Gestire le versioni con gitversion - Introduzione</title><link>http://www.getlatestversion.eu/it/2020/10/gestire-le-versioni-con-gitversion-introduzione/</link><pubDate>Fri, 09 Oct 2020 00:00:01 +0100</pubDate><author>Daniele Pozzobon</author><guid>http://www.getlatestversion.eu/it/2020/10/gestire-le-versioni-con-gitversion-introduzione/</guid><description>&lt;p>Nella seguente pillola discutiamo dei principi base del perchè conviene versionare e diamo un primo sguardo a GitVersion che ci faciliterà nell&amp;rsquo;implementare una buona strategia di versionamento.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/uy63C5CEyEA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="transcript-del-video">Transcript del video&lt;/h2>
&lt;p>Buongiorno a tutti e benvenuti a una nuova serie di DevOps pills, in questa serie parleremo di versionamento del software.&lt;/p>
&lt;p>Il concetto di controllo di versione nasce ben prima del suo utilizzo in ambito di ingegneria del software, infatti veniva già usato per gestire l&amp;rsquo;evoluzione di disegni su carta di progetti ingegneristici di vario genere. Ogni disegno veniva archiviato con un numero di versione e possibilmente una data; di uno stesso disegno potevano esistere evoluzioni differenti in base alle necessità e versioni &amp;ldquo;definitive&amp;rdquo; venivano protocollate con un numero di protocollo accompagnato dalla data di protocollazione.&lt;/p>
&lt;p>È chiaro come questo paradigma si adatti molto bene al mondo software in cui il codice è in continua evoluzione e poter tornare in dietro a una versione o sviluppare un ramo parallelo può facilitare il lavoro dei programmatori. Ecco quindi che sono nati diversi strumenti per controllare l&amp;rsquo;evoluzione del software tra cui troviamo TFS, SVN e Git. Purtroppo però questi software si limitano a tracciare la storia delle modifiche del codice ma non ci forniscono alcuna informazione su quale versione dare al programma o libreria che viene generato da questo codice, a meno che non si usi l&amp;rsquo;id del commit. Tuttavia, questo id non è spesso parlante.&lt;/p>
&lt;p>Cerco di spiegarmi. Se sto sviluppando una funzionalità piuttosto complessa molto probabilmente farò vari commit durante la fase di sviluppo ma il software passerà dalla versione A di partenza alla versione B, che indica l&amp;rsquo;aggiunta della funzionalità, solamente quando la stessa sarà pronta per essere rilasciata.&lt;/p>
&lt;p>La mancanza di uno standard o una best practice ha portato ogni team o azienda a studiare il proprio metodo reinventando la ruota o addirittura ignorando completamente il problema e non versionando in alcun modo le proprie librerie. D&amp;rsquo;altro canto, quando si tratta di codice interno che senso ha dare una versione a una libreria? Non basta fornire sempre l&amp;rsquo;ultima versione agli utilizzatori? Oppure non è più facile mettere tutte le librerie in una solution unica in modo da non doverle versionare?&lt;/p>
&lt;p>Come potete immaginare questa linea di pensiero porta a risultati catastrofici e alcuni li ho visti di persona:&lt;/p>
&lt;ul>
&lt;li>Dll senza informazione di versione passate via email&lt;/li>
&lt;li>Dll messe in controllo di versione per essere sicuro che quella versione del codice venga fatta eseguire con quella particolare dll&lt;/li>
&lt;li>Confrontare le &amp;ldquo;versioni&amp;rdquo; delle dll in base alla loro dimensione e ipotizzare che quella più grossa sia la più precente perché &amp;ldquo;contiene più funzionalità&amp;rdquo;&lt;/li>
&lt;li>Solution così onerose che aprire tutti i progetti provocherebbe crash sul computer con tutti i problemi derivanti&lt;/li>
&lt;/ul>
&lt;p>È chiaro che bisogna trovare un modo per gestire il versionamento. Una serie di regole e convenzioni che aiutino gli sviluppatori a decidere se vale la pena passare alla versione successiva di una dipendenza o meno.&lt;/p>
&lt;p>La convenzione più comunemente utilizzata al giorno d&amp;rsquo;oggi è detta &lt;strong>Semantic Versioning&lt;/strong> o, per gli amici, &lt;strong>SemVer&lt;/strong> e trovate tutte le informazioni a riguardo al sito &lt;a href="semver.org">semver.org&lt;/a>, link nella descrizione del video. Ecco un riassunto delle regole di base.&lt;/p>
&lt;p>In pratica nella Semantic Versioning la versione è composta da tre numeri separati da punti detti rispettivamente &lt;strong>Major&lt;/strong>, &lt;strong>Minor&lt;/strong> e &lt;strong>Patch&lt;/strong>, a cui è possibile accodare etichette per aggiungere altre informazioni utili, per esempio versione &amp;ldquo;1.5.3-beta&amp;rdquo;. La Semantic Versioning è una serie di regole su come incrementare i differenti valori Major, Minor e Patch in base a cosa è stato modifcato nel codice. In poche parole:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Incrementate la &lt;strong>Patch&lt;/strong> quando fate piccole modifiche e correzioni di bug che non influenzano come il mondo esterno interagisce con il vostro programma o libreria&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Incrementate la &lt;strong>Minor&lt;/strong> quando fate modifiche o aggiunte funzionalità senza però rompere la compatibilità con le versioni precedenti&lt;/p>
&lt;/li>
&lt;li>
&lt;p>E infine, incrementate la &lt;strong>Major&lt;/strong> quando fate modifiche che rendono parti del nuovo codice non più compatibile con le versioni precedenti e quindi che richiederebbero modifiche da parte dei programmi che dipendono dalla vostra libreria&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Seguendo questa convenzione un utilizzatore della vostra libreria riesce a identificare a colpo d&amp;rsquo;occhio se può aggiornare la versione senza sorprese o se invece gli conviene leggere attentamente i Change Log.&lt;/p>
&lt;p>Ad esempio, immaginiamo di avere una libreria che fa i calcoli di conversione tra varie monete e la versione di questa libreria è &amp;ldquo;1.5.3&amp;rdquo;; a questo punto, arriva una segnalazione di errore su una stringa. Correggo e creo la versione &amp;ldquo;1.5.4&amp;rdquo;, incrementando di uno la patch.&lt;/p>
&lt;p>Nel caso in cui stia creando una nuova funzionalità (per esempio aggiungo una moneta alla lista di monete per cui posso fare la conversione) dovrò incrementare la Minor azzerando allo stesso tempo la Patch. Creo quindi la versione &amp;ldquo;1.6.0&amp;rdquo;.&lt;/p>
&lt;p>Ora, immaginiamo di dover invertire l&amp;rsquo;ordine dei parametri della funzione di calcolo. Tale modifica renderebbe non retrocompatibile il codice dei nostri utilizzatori e richiederebbe loro di modificare il codice. Per questa ragione aggiorneremmo la Major azzerando Minor e Patch allo stesso tempo. Quindi la nostra versione diventa &amp;ldquo;2.0.0&amp;rdquo;.&lt;/p>
&lt;p>spero sia chiaro quanto una convenzione di questo genere sia utile per gli sviluppatori che ora possono decidere se possono aggiornare liberamente le librerie o se è meglio che si prendano un po&amp;rsquo; di tempo per farlo per evitare sorprese.&lt;/p>
&lt;p>Ora che conosciamo alcuni motivi per cui conviene gestire le versioni del software, in particolare delle librerie, possiamo vedere come automatizzare la creazione della versione grazie a un programma chiamato gitversion. Come potete immaginare dal nome gitversion sfrutta git quindi se ancora non state usando git, beh, questo è un altro tra i tanti motivi per aggiornare il vostro sistema di controllo di versione software.&lt;/p>
&lt;p>Per ora concentriamoci sull&amp;rsquo;installazione e sull&amp;rsquo;utilizzo in locale e in un prossimo video vedremo come utilizzarlo nella nostra pipeline di build e rilascio.&lt;/p>
&lt;p>Nel sito di documentazione di gitversion questo viene definito semplicemente come uno strumento utile a implementare il semantic versioning nei tuoi progetti. Sebbene questa definizionre riassuma perfettamente l&amp;rsquo;utilità di gitversion, per apprezzarlo al massimo è meglio vederlo in azione. Procediamo quindi a installarlo.&lt;/p>
&lt;p>Come vi dicevo prima voglio usarlo localmente e successivamente vedremo altri metodi di utilizzo, quindi per trovare le istruzioni su come installarlo vado nella pagina &amp;ldquo;Getting started e poi Command line&amp;rdquo;&lt;/p>
&lt;p>Qua vedete che é possibile installare git version con Chocolatey se siete su windows oppure con homebrew se siete su Mac. Io sono su windows e quindi vi mostro come installarlo con chocolatey (per inciso, se non usate chocolatey non sapete cosa vi perdete)&lt;/p>
&lt;p>Semplicemente apro powershell in modalità amministratore e lancio il commando &lt;code>choco install gitversion.portable -y&lt;/code> e premo invio. Possiamo vedere che l&amp;rsquo;istallazione è partita e una volta completata posso confermare che l&amp;rsquo;installazione sia andata a buon fine lanciando il comando &lt;code>gitversion /version&lt;/code>&lt;/p>
&lt;p>Un modo alternativo che non richiede l&amp;rsquo;utilizzo di un package manager, nel caso non siate abilitati a usarlo è quello di scaricare il pacchetto nuget GitVersion.CommandLine e dentro trovate l&amp;rsquo;eseguibile. Questa procedura non è documentata da nessuna parte quindi prendetela con le pinzette&lt;/p>
&lt;p>Ora che l&amp;rsquo;abbiamo installato sulla nostra macchina è il momento di cominciare a trarne dei vantaggi.&lt;/p>
&lt;p>Per vederlo in azione creiamo un progetto dotnet core con la CLI , niente di esoterico, una semplice console application. Facciamo &lt;code>dotnet new console&lt;/code> e vediamo che viene creato il programma, poi con &lt;code>dotnet run&lt;/code> lo eseguiamo e vediamo il classico &amp;ldquo;Hello world!&amp;quot;.&lt;/p>
&lt;p>Ora, per usare gitversion abbiamo bisogno di … git, quindi inizializziamo un repositori con &lt;code>git init&lt;/code>. Andiamo su &lt;a href="https://github.com/github/gitignore">github.com/github/gitignore&lt;/a> e scarichiamo un gitignore adatto al nostro ambiente. Scegliamo visualstudio e lo salviamo direttamente nella cartella del progetto togliendo tutto quello che sta prima di &lt;code>.gitignore&lt;/code>.&lt;/p>
&lt;p>Ora possiamo fare &lt;code>git add .&lt;/code> e &lt;code>git commit -m &amp;quot;first commit&amp;quot;&lt;/code>&lt;/p>
&lt;p>Ora che abbiamo un repository con almeno un commit proviamo a eseguire gitversion. Possiamo da subito vedere che il commando torna una serie di informazioni sulla versione. Prima di tutto come default propone la versione &amp;ldquo;0.1.0&amp;rdquo;.&lt;/p>
&lt;p>Alcune delle informazioni interessanti che possiamo trovare nella risposta sono&lt;/p>
&lt;ul>
&lt;li>&lt;strong>BranchName&lt;/strong> che fornisce il nome del branch&lt;/li>
&lt;li>Lo &lt;strong>Sha&lt;/strong> del commit cosi come la versione corta in &lt;strong>ShortSha&lt;/strong>&lt;/li>
&lt;li>&lt;strong>FullSemVer&lt;/strong> che ha questo curioso &lt;code>+0&lt;/code> alla fine che vedremo tra un po&amp;rsquo; a cosa serve&lt;/li>
&lt;li>&lt;strong>InformationalVersion&lt;/strong> che fornisce una label completa con tutte le informazioni del commit&lt;/li>
&lt;/ul>
&lt;p>Ora apriamo vscode e facciamo una piccola modifica. Salviamo il file e facciamo il commit.&lt;/p>
&lt;p>Bene. Ora proviamo a fare di nuovo &lt;code>gitversion&lt;/code>. Vediamo che la nostra semver non è cambiata, ci troviamo sempre ad avere &amp;ldquo;0.1.0&amp;rdquo;. Ma il valore di &lt;strong>BuildMetaData&lt;/strong> è cambiato, è passato da 0 a 1 ed, in particolare, questo valore viene utilizzato per comporre FullSemVer.&lt;/p>
&lt;p>Di default per far incrementare la semver dobbiamo usare i tag nei commit. Infatti se creiamo un tag con &lt;code>git tag&lt;/code> e poi proviamo a lanciare &lt;code>gitversion&lt;/code> vediamo che la semver diventa &amp;ldquo;0.1.1&amp;rdquo; come il tag che abbiamo aggiunto.&lt;/p>
&lt;p>Gitversion è molto configurabile e di default supporta alcune modalità di utilizzo. Vedremo nei prossimi video quali sono i modi di utilizzo di default e come configurarlo, e vedremo anche come utilizzarlo nella nostra pipeline di CI/CD&lt;/p>
&lt;p>Per ora è tutto, se vi è piaciuto il video mettete un like. Per avere altre pillole su DevOps, iscrivetevi al canale e cliccate sulla campanellina per rimanere sempre aggiornati&lt;/p>
&lt;p>Alla prossima.&lt;/p></description></item><item><title>Evento Digital Warriors 2020 - Combattenti digitali</title><link>http://www.getlatestversion.eu/it/2020/09/evento-digital-warriors-2020-combattenti-digitali/</link><pubDate>Tue, 01 Sep 2020 12:00:00 +0200</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/it/2020/09/evento-digital-warriors-2020-combattenti-digitali/</guid><description>&lt;h1 id="levento">L&amp;rsquo;evento&lt;/h1>
&lt;p>&lt;strong>Giorno:&lt;/strong> 10 dicembre 2020&lt;/p>
&lt;p>&lt;strong>Hashtag:&lt;/strong> #digitalwarriors2020&lt;/p>
&lt;p>Come membro di &lt;a href="https://getlatestversion.eu">getlatestversion.eu&lt;/a> vorrei condividere con voi un evento che sto organizzando insieme agli amici di &lt;a href="https://ive.ai">IVE&lt;/a> e di dotnetsicilia (&lt;a href="https://www.gaetanopaterno.it">Gaetano Paternò&lt;/a>). Vogliamo provare a sfruttare la potenzialità degli strumenti di streaming in nostro possesso per offirvi una giornata all&amp;rsquo;insegna delle esperienze di vita reale aziendale ai tempi del covid-19.&lt;/p>
&lt;p>&lt;img src="./splash.png" alt="dw2020">&lt;/p>
&lt;p>&lt;a href="https://www.facebook.com/wearedigitalwarriors">Su Facebook&lt;/a>&lt;/p>
&lt;p>Stiamo tutti vivendo un momento particolare e complesso. Uno di quei momenti che segnano tristemente la storia in maniera indelebile. Ma come spesso accade, dimostriamo la nostra forza reattiva. Da situazioni di questo tipo emergono tantissimi aspetti positivi derivanti da persone e iniziative. Come una fenice che rinasce dalle proprie ceneri, la nostra società risorge in termini di pensiero comune e controbatte ogni attacco inferto dall&amp;rsquo;ormai sottinteso virus.&lt;/p>
&lt;h2 id="la-call-for-paper-cfp">La call for paper (CFP)&lt;/h2>
&lt;p>Non siate timidi, condividere esperienze è sempre molto interessante. Chiunque parteciperà potrà avere feedback interessanti da ognuno dei presenti nella stanza.
Ecco il link per &lt;a href="https://sessionize.com/digital-warriors-2020/">proporre la sessione&lt;/a>&lt;/p>
&lt;h2 id="iscrizione-gratis">Iscrizione gratis&lt;/h2>
&lt;p>&lt;a href="https://biglietti-digital-warriors-2020.eventbrite.it/">Qui potete registrare&lt;/a> la vostra partecipazione. Bastano pochi click e riceverete le istruzioni via email.&lt;/p>
&lt;h2 id="mission">Mission&lt;/h2>
&lt;p>In questo evento virtuale, avremo racconti e testimonianze dirette sul campo. Storie di aziende e persone che hanno cambiato se stessi, le aziende in cui lavorano e le altre persone, unitamente alla cultura del lavoro. Idee di professionisti utili a costruire anche un trend di ripresa e di miglioria del mondo in cui viviamo.&lt;/p>
&lt;p>Ognuno di noi vuole portare valore aggiunto descrivendo come la propria realtà ha reagito al momento e perché alcune scelte sono state prese. Non capita spesso di avere persone che descrivono tutto ciò in un momento storico come quello che ha caratterizzato e sta caratterizzando gli ultimi mesi.&lt;/p>
&lt;p>Vogliamo condividere le reazioni ai problemi iniziali, le azioni correttive, gli strumenti applicati, il vivere giorno per giorno, la gestione di emergenze, pericoli, lavoro remoto, smart e le idee di gestione.&lt;/p>
&lt;h2 id="logistica">Logistica&lt;/h2>
&lt;p>Ogni sessione ha un link che vi porterà in una stanza online nella quale seguire i nostri speaker. Nel caso in cui abbiate domande, siccome nel meeting non vi sarà la possibilità di intervenire in ogni momento, vi chiediamo di scrivere le vostre domande nel pannello di chat appositamente predisposto. La sezione domande e risposte sarà disponibile a fine sessione.&lt;/p>
&lt;h2 id="grazie">Grazie&lt;/h2>
&lt;p>Eventi come questi, &lt;strong>completamente gratuiti&lt;/strong>, non sarebbero possibili senza lo sforzo, il contributo e il lavoro volontario dei nostri aiutanti sul campo.
Combattenti digitali, anche da casa!&lt;/p>
&lt;p>&lt;img src="./sponsor.png" alt="sponsor">&lt;/p></description></item><item><title>Migrare work item da Jira a Azure DevOps</title><link>http://www.getlatestversion.eu/it/2020/08/migrare-work-item-da-jira-a-azure-devops/</link><pubDate>Tue, 18 Aug 2020 17:30:00 +0200</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/it/2020/08/migrare-work-item-da-jira-a-azure-devops/</guid><description>&lt;h1 id="introduzione">Introduzione&lt;/h1>
&lt;p>La migrazione, indipendentemente da quali siano le tecnologie, è una delle attività più ardue con cui avere a che fare. E non solo nel mondo IT.&lt;/p>
&lt;p>Lavorando sulla cultura di tante aziende che ho seguito, ho avuto la conferma che lo strumento dovrebbe essere considerato soltanto alla fine del processo di migrazione. Infatti, dopo cerimonie, team working, cambiamento di metodologia da legacy a iterativo, arriva finalmente il momento di capire quale degli strumenti a disposizione siano veramente disegnati per la nostra realtà. Vi è da capire poi se mantenere quello che già abbiamo oppure se provare a cambiare, possibilmente in meglio.&lt;/p>
&lt;p>Questa è una semplice guida di migrazione di work item da &lt;a href="https://www.atlassian.com/software/jira">Jira cloud&lt;/a> a &lt;a href="https://azure.microsoft.com/it-it/services/devops/">Azure DevOps Services&lt;/a> tramite uno strumento intuitivo di &lt;a href="https://solidify.se/">Solidify&lt;/a>.&lt;/p>
&lt;p>Trovate il video su youtube, sul canale di getlatestversion:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/6k64xeqBMws" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Risorse:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/solidify/jira-azuredevops-migrator">solidify/jira-azuredevops-migrator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/solidify/jira-azuredevops-migrator/releases">solidify/jira-azuredevops-migrator releases&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/solidify/jira-azuredevops-migrator/blob/master/docs/config.md">config json full docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.azure.com/">Azure DevOps Services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.atlassian.com/it/software/jira">Jira software in cloud&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Git Cherry-Pick per un raccolto strategico</title><link>http://www.getlatestversion.eu/it/2020/07/git-cherry-pick-per-un-raccolto-strategico/</link><pubDate>Mon, 13 Jul 2020 03:00:00 +0200</pubDate><author>Bartolomeo Lombardi</author><guid>http://www.getlatestversion.eu/it/2020/07/git-cherry-pick-per-un-raccolto-strategico/</guid><description>&lt;h1 id="introduzione">Introduzione&lt;/h1>
&lt;p>Le aziende IT che sviluppano e vendono un prodotto software sono sempre più concentrate sui rilasci di nuove funzionalità per proporre nuove versioni, senza tralasciare la manutenzione delle precedenti, utilizzate dai clienti.
Generalemente si parla di progetti di milioni di righe di codice che prevedono più team di svilupattori siti in tutto il globo con una forte coordinazione e collaborazione tra loro, in cui si trovano a dover maneggiare più versioni dello stesso prodotto con un numero significativo di rami di release.
Fissare un bug su più versioni è un compito oneroso poichè lo sviluppatore deve riportare le stesse correzioni nei vari rami di release. Quest&amp;rsquo;ultima azione in Git è possibile ed è detta &amp;ldquo;cherry picking&amp;rdquo;.&lt;/p>
&lt;h1 id="git-cherry-pick">Git cherry-pick&lt;/h1>
&lt;p>Uno tra i più potenti comandi che git mette a disposizione è il cherry-pick. Questo comando prende in input uno o più commmit e applica gli stessi cambiamenti su un ramo differente, attraverso la creazione di un nuovo commit. Infatti, la &amp;ldquo;raccolta di ciliegie&amp;rdquo;, letteralmente, è l&amp;rsquo;atto di scegliere un commit da un ramo e applicarlo su un altro.&lt;/p>
&lt;p>Il cherry-pick è un comando estremamente efficace in molti flussi di lavoro basati su Git come ad esempio quello usato dal team di &lt;a href="https://docs.microsoft.com/en-us/azure/devops/learn/devops-at-microsoft/release-flow">Azure DevOps&lt;/a> come descritto nel seguente &lt;a href="https://devblogs.microsoft.com/devops/improving-azure-devops-cherry-picking/">articolo&lt;/a>, di cui riporto un&amp;rsquo;immagine che rappresenta il sopracitato flusso di lavoro.
&lt;img src="cherry-pick-workflow.jpg" alt="Cherry-Pick: flusso di rilascio">&lt;/p>
&lt;p>Quando si lavora con più versioni dello stesso prodotto è indispensabile assicurarsi che tutti i bug segnalati siano correttamente risolti e che tutte le versioni in vita del prodotto siano conseguentemente aggiornate; tale azione viene effettuata anche sul ramo main al fine di evitare di creare una nuova release con lo stesso bug.&lt;/p>
&lt;h2 id="azure-devops-repos">Azure DevOps Repos&lt;/h2>
&lt;p>Azure DevOps mette a disposizione il comando cherry-pick di una Pull Request (PR) completata o del singolo commit, direttamente dalla piattaforma. Tale meccanismo crea una nuova PR con i medesimi cambiamenti sul ramo su cui si necessita della fix.
&lt;img src="azdo-cp.jpg" alt="Cherry-Pick di una PR da Azure DevOps">&lt;/p>
&lt;p>Inoltre, è possibile effettuare un cherry-pick multiplo con pochi click, grazie ad un&amp;rsquo;estensione open source scaricabile ed installabile attraverso il marketplace di Azure DevOps &lt;a href="https://github.com/microsoft/azure-repos-pr-multi-cherry-pick">PR Multi-Cherry-Pick&lt;/a>.&lt;/p>
&lt;p>Molte volte è possibile ritrovarsi nella medesima situazione dell&amp;rsquo;immagine sottostante in cui Azure DevOps avverte che non è possibile effettuare il cherry-pick del commit automaticamente in quanto la modifica che si sta implementando genera conflitti e va, pertanto, effettuata in locale.
&lt;img src="azdo-cp-error.jpg" alt="Errore durante Cherry-Pick in Azure DevOps">&lt;/p>
&lt;p>Ci sono molti ambienti di sviluppo che si integrano con Git e permettono di effettuare tale operazione attraverso un&amp;rsquo;interfaccia grafica. Per esempio Visual Studio o VSCode sono degli ottimi candidati.&lt;/p>
&lt;h2 id="git-cherry-pick---continue">Git cherry-pick &amp;ndash;continue&lt;/h2>
&lt;p>Sono necessari pochi passi per effettuare il procedimento di &lt;a href="https://git-scm.com/docs/git-cherry-pick">git cherry-pick&lt;/a> da riga di comando.&lt;/p>
&lt;p>La prima azione e&amp;rsquo; prendere nota dell&amp;rsquo;hash dei commits di cui si intende effettuare l&amp;rsquo;azione di cherry-pick; nel caso specifico di una PR l&amp;rsquo;elenco dei commit e&amp;rsquo; consultabile nella tab &lt;strong>Commits&lt;/strong> in Azure DevOps Repos, come mostrato nell&amp;rsquo;immagine seguente.
&lt;img src="azdo-commits-tab.jpg" alt="Tabella dei commit di una PR in Azure DevOps">&lt;/p>
&lt;p>Spostandosi sul branch (&lt;code>git checkout &amp;lt;nome-branch&amp;gt;&lt;/code>) in cui si intende portare il commit si deve eseguire il comando &lt;code>git cherry-pick &amp;lt;commit&amp;gt;&lt;/code>.
Siamo a conoscenza che il cherry-pick di questo commit causa conflitto, quindi una volta effettuto il merge manuale con Visual Studio (o altri IDE) va poi lanciato &lt;code>git cherry-pick --continue&lt;/code> per procedere con l&amp;rsquo;operazione; se invece si vuole terminare il procedimento basta digitare &lt;code>git cherry-pick --abort&lt;/code>.&lt;/p>
&lt;p>Una volta completato il processo va effettuato un &lt;code>git push&lt;/code> del nuovo commit generato.&lt;/p></description></item><item><title>Organizzazione account in Azure DevOps: Security dei Repository</title><link>http://www.getlatestversion.eu/it/2020/05/organizzazione-account-in-azure-devops-security-dei-repository/</link><pubDate>Mon, 25 May 2020 00:00:38 +0100</pubDate><author>Gian Maria Ricci</author><guid>http://www.getlatestversion.eu/it/2020/05/organizzazione-account-in-azure-devops-security-dei-repository/</guid><description>&lt;p>Breve pillola sul come configurare la security dei repository per creare, se necessario, alcuni repository Git o cartelle TFVC che siano visibili solamente agli utenti di un particolare Team del proprio Team Project.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/fcU70o1r7xw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Per chi se li fosse persi, ecco i link ai precedenti video di questa serie.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops/">Organizzazione account in azure devops&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops-security/">Organizzazione account in Azure DevOps: Security&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.getlatestversion.eu/it/2020/05/organizzazione-account-in-azure-devops-security-dei-workitem/">Organizzazione account in Azure DevOps: Security dei Work Items&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Buona visione.&lt;/p></description></item><item><title>SQL Wars - L'attacco dei cloni e la ribellione dei container</title><link>http://www.getlatestversion.eu/it/2020/05/sql-wars-lattacco-dei-cloni-e-la-ribellione-dei-container/</link><pubDate>Mon, 18 May 2020 11:30:00 +0200</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/it/2020/05/sql-wars-lattacco-dei-cloni-e-la-ribellione-dei-container/</guid><description>&lt;p>Getlatestversion ha partecipato a &lt;a href="https://cloudgen.it/home-gen-events/">HomeGen&lt;/a>, una bellissima iniziativa dei nostri amici di &lt;a href="https://cloudgen.it/">CloudGen Verona&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://www.getlatestversion.eu/it/authors/suxstellino/">Alessandro Alpi&lt;/a> e &lt;a href="https://www.getlatestversion.eu/it/authors/giulianolatini/">Giuliano Latini&lt;/a> hanno presentato &amp;ldquo;SQL Wars, l&amp;rsquo;attacco dei cloni e la ribellione dei container&amp;rdquo;, una sessione su come fare provisioning dei dati di produzioni in ambienti diversi tramite qualche click o in automation.&lt;/p>
&lt;p>&lt;img src="sql-clone-container-title.png" alt="image.png">&lt;/p>
&lt;p>La registrazione della sessione è disponibile nel video seguente sul nostro &lt;a href="https://www.youtube.com/c/getlatestversion">canale YouTube&lt;/a>.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/5qSJa0Zxd-g" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Code dependencies: La Binary Composition non è solo un artefatto algebrico</title><link>http://www.getlatestversion.eu/it/2020/05/code-dependencies-la-binary-composition-non-%C3%A8-solo-un-artefatto-algebrico/</link><pubDate>Sun, 17 May 2020 16:00:00 +0200</pubDate><author>Bartolomeo Lombardi</author><guid>http://www.getlatestversion.eu/it/2020/05/code-dependencies-la-binary-composition-non-%C3%A8-solo-un-artefatto-algebrico/</guid><description>&lt;h1 id="introduzione">Introduzione&lt;/h1>
&lt;p>Nel corso degli anni, l&amp;rsquo;aumento delle righe di codice sorgente dei software, con più team che lavorano sullo stesso prodotto, ha portato alla suddivisione di una unica soluzione in più soluzioni. Molteplici sono le motivazioni che hanno spinto verso questo cambiamento; le principali sono la riduzione del tempo necessario per la compilazione, la riduzione del tempo impiegato per l&amp;rsquo;integrazione delle soluzioni nonchè l&amp;rsquo;ottimizzazione dei tempi di avvio dell&amp;rsquo;ambiente di sviluppo popolato da centinaia di progetti.
La binary composition è la principale conseguenza dello spacchettamento della soluzione.&lt;/p>
&lt;h1 id="cosè-la-binary-composition">Cos'è la binary composition?&lt;/h1>
&lt;p>Si parla di binary composition quando una o più soluzioni fanno riferimento a file binari prodotti da altre soluzioni. Nell&amp;rsquo;immagine seguente, sono rappresentate a scopo esemplificativo due soluzioni Visual Studio: soluzione A e soluzione B. La soluzione B contiene dei componenti ai quali la soluzione A si riferisce. E&amp;rsquo; quindi necessario che i file binari prodotti dalla soluzione B siano disponibili prima che la soluzione A possa essere compilata.&lt;/p>
&lt;p>&lt;img src="visual-studio-references.jpg" alt="image.png">&lt;/p>
&lt;h1 id="come-possiamo-distribuire-i-file-binari">Come possiamo distribuire i file binari?&lt;/h1>
&lt;p>Ci sono diversi modi in cui possiamo rendere disponibili i file binari.&lt;/p>
&lt;h2 id="repository-git">Repository Git&lt;/h2>
&lt;p>Una delle possibilità è fare commit dei file binari nel repository ogni qualvolta che lo sviluppatore richiede di fare merge con le sue modifiche nel ramo development/master - attraverso una Pull Request. Il tutto può essere realizzato mediante un processo automatico che si traduce in una pipeline di Continuous Integration. Naturalmente, questo comporterebbe l&amp;rsquo;aumento delle dimensioni del repository, introducendo tempi significativi di checkout e di prestazioni.
Immaginiamo cosa potrebbe accadere se i team lavorassero su rami diversi ritrovandosi ad utilizzare differenti versioni degli stessi file binari: si creerebbero sicuramente conflitti durante la fase di merge.&lt;/p>
&lt;h2 id="condivisione-in-cartella-di-rete">Condivisione in cartella di rete&lt;/h2>
&lt;p>Un&amp;rsquo;altra opzione consiste nel caricare i file binari in una cartella di rete condivisa. Adottando questa soluzione non sarà però disponibile l&amp;rsquo;indicizzazione per facilitare la ricerca rapida dei file binari e inoltre non esisterà alcuna protezione contro l&amp;rsquo;override di una specifica versione.&lt;/p>
&lt;h2 id="gestione-dei-pacchetti-mediante-lutilizzo-di-azure-artifact">Gestione dei pacchetti mediante l&amp;rsquo;utilizzo di Azure Artifact&lt;/h2>
&lt;p>Questa rappresenta sicuramente la soluzione più adatta, poichè consente di inserire i file binari in pacchetti NuGet (e altri come npm, Maven, Python e Universal). In questo modo i progetti contenuti nella soluzione A possono fare riferimento a tali pacchetti.
Uno dei vantaggi introdotti da questa metodologia è la possibilità di aggiungere un task di pubblicazione NuGet nella pipeline di Continuous Integration di Azure DevOps, che automatizzi la procedura di versionamento del pacchetto e che renda la procedura di distribuzione più affidabile.&lt;/p></description></item><item><title>Organizzazione account in Azure DevOps: Security dei WorkItem</title><link>http://www.getlatestversion.eu/it/2020/05/organizzazione-account-in-azure-devops-security-dei-workitem/</link><pubDate>Mon, 11 May 2020 00:00:38 +0100</pubDate><author>Gian Maria Ricci</author><guid>http://www.getlatestversion.eu/it/2020/05/organizzazione-account-in-azure-devops-security-dei-workitem/</guid><description>&lt;p>Breve pillola sul come configurare la security delle aree per far si che un utente possa vedere solamente i Work Item che fanno parte dei team a cui appartiene.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/aRI0VcJ0LvA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Per chi se li fosse persi, ecco i link ai precedenti video di questa serie.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops/">Organizzazione account in azure devops&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops-security/">Organizzazione account in Azure DevOps: Security&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Buona visione.&lt;/p></description></item><item><title>Gestire progetti utilizzando le Wiki di Azure DevOps</title><link>http://www.getlatestversion.eu/it/2020/05/gestire-progetti-utilizzando-le-wiki-di-azure-devops/</link><pubDate>Tue, 05 May 2020 15:30:00 +0100</pubDate><author>Alessandro Alpi</author><guid>http://www.getlatestversion.eu/it/2020/05/gestire-progetti-utilizzando-le-wiki-di-azure-devops/</guid><description>&lt;p>Con il seguente video descrivo un particolare approccio alla gestione di progetti (o parte di essi) sfruttando le Wiki di Azure DevOps.&lt;/p>
&lt;p>L&amp;rsquo;idea alla base è molto semplice: un progetto complesso da gestire, in un momento in cui ancora non si conosce altro che i punti salienti utili alla raccolta requisiti. Siccome creare work item può essere sia prematuro che scomodo, perché invece non sfruttare la Wiki come aggregatore di appunti e come strumento centrale di gesione?&lt;/p>
&lt;p>Vediamo come&amp;hellip;&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/-ioFUo35yEo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Organizzazione account in Azure DevOps</title><link>http://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops/</link><pubDate>Tue, 28 Apr 2020 15:00:38 +0100</pubDate><author>Gian Maria Ricci</author><guid>http://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops/</guid><description>&lt;p>Breve pillola sul come organizzare il proprio account Azure DevOps con Team Project / Team ed organizations.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/sv700J3_Mwk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Organizzazione account in Azure DevOps: Security</title><link>http://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops-security/</link><pubDate>Tue, 28 Apr 2020 15:00:38 +0100</pubDate><author>Gian Maria Ricci</author><guid>http://www.getlatestversion.eu/it/2020/04/organizzazione-account-in-azure-devops-security/</guid><description>&lt;p>Breve pillola sul come Azure DevOps utilizzi gruppi interni per gestire la security di un intera organizzazione e quella dei singoli Team Projects.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/8oU6eeK9PMg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Buona visione.&lt;/p></description></item><item><title>Evidenziare gli impedimenti in una kanban board su Azure DevOps</title><link>http://www.getlatestversion.eu/it/2020/04/evidenziare-gli-impedimenti-in-una-kanban-board-su-azure-devops/</link><pubDate>Sat, 25 Apr 2020 20:14:38 +0100</pubDate><author>Michele Ferracin</author><guid>http://www.getlatestversion.eu/it/2020/04/evidenziare-gli-impedimenti-in-una-kanban-board-su-azure-devops/</guid><description>&lt;p>In questo video tutorial viene mostrato come evidenziari gli impedimenti in un approccio kanban su Azure DevOps.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/4SSBcEbR-MI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Chi siamo</title><link>http://www.getlatestversion.eu/it/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.getlatestversion.eu/it/about/</guid><description>&lt;p>&lt;img src="http://www.getlatestversion.eu/images/320px-Flag_of_Italy.svg.png" alt="Italy flag">&lt;/p>
&lt;h2 id="chi-siamo">Chi siamo&lt;/h2>
&lt;p>GetLatestVersion è la prima community italiana sui temi DevOps, Application Lifecycle Management e la gestione dell&amp;rsquo;intero ciclo di vita del software (Software Development Life-Cycle).
I membri del Team sono professionisti che operano nel settore da diversi anni ed in diversi ambiti:&lt;/p>
&lt;ul>
&lt;li>Metodologie di sviluppo&lt;/li>
&lt;li>Automazione dei processi&lt;/li>
&lt;li>Database Lifecycle Management
Gli strumenti utilizzati sono prevalentemente basati su tecnologie Microsoft (Azure DevOps, ex Visual Studio Team Services, ex Team Foundation Server).&lt;/li>
&lt;/ul>
&lt;h2 id="cosa-facciamo">Cosa facciamo&lt;/h2>
&lt;p>Pubblichiamo articoli (post) sull&amp;rsquo;applicazione dei principi DevOps in diverse organizzazioni. Il punto di vista spazia dai processi fino ai dettagli implementativi.
Registriamo video di introduzione, di approfondimento e di condivisione di esperienze sul nostro &lt;a href="https://www.youtube.com/GetLatestVersion">canale YouTube&lt;/a>.
Infine, organizziamo eventi di persona ed online sulle diverse tematiche inerenti DevOps e ALM.&lt;/p></description></item><item><title>Ricerca</title><link>http://www.getlatestversion.eu/it/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.getlatestversion.eu/it/search/</guid><description>&lt;p class="error message js-hidden">You must have Javascript enabled to use this function.&lt;/p>
&lt;p class="search-loading status message hidden">Loading search index…&lt;/p>
&lt;div class="search-input hidden">
&lt;form id="search-form" class="search-form" action="#" method="post" accept-charset="UTF-8" role="search">
&lt;label for="query" class="visually-hidden">Search&lt;/label>
&lt;input type="search" id="query" name="query" class="search-text" placeholder="Enter the terms you wish to search for." maxlength="128">
&lt;button type="submit" name="submit" class="form-submit" >Search&lt;/button>
&lt;/form>
&lt;/div>
&lt;div class="search-results">&lt;/div>
&lt;template>
&lt;article class="search-result list-view">
&lt;header>
&lt;h2 class="title title-submitted">&lt;a href="#">Title here&lt;/a>&lt;/h2>
&lt;div class="submitted">&lt;time class="created-date">Date here&lt;/time>&lt;/div>
&lt;/header>
&lt;div class="content">Summary here&lt;/div>
&lt;/article>
&lt;/template></description></item></channel></rss>