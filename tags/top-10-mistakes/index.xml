<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>top 10 mistakes on GetLatestVersion – Europe</title><link>http://www.getlatestversion.eu/tags/top-10-mistakes/</link><description>Recent content in top 10 mistakes on GetLatestVersion – Europe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 May 2020 14:00:00 +0100</lastBuildDate><atom:link href="http://www.getlatestversion.eu/tags/top-10-mistakes/index.xml" rel="self" type="application/rss+xml"/><item><title>Top 10 Pipeline mistakes</title><link>http://www.getlatestversion.eu/2020/05/top-10-pipeline-mistakes/</link><pubDate>Sat, 23 May 2020 14:00:00 +0100</pubDate><author>Giulio Vian</author><guid>http://www.getlatestversion.eu/2020/05/top-10-pipeline-mistakes/</guid><description>&lt;p>Today I am going to start a series of posts detailing common issues or mistakes in a DevOps context.
I will try to refer to my experience and add some practical suggestion to identify and solve these issues.&lt;/p>
&lt;p>Let&amp;rsquo;s start with my list of top 10 CI/CD pipeline issues.&lt;/p>
&lt;h2 id="the-list">The list&lt;/h2>
&lt;p>&lt;strong>NOTE&lt;/strong>: the links will work only when the matching post is published.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="../sloppy-secrets-handling">Sloppy handling of Secrets&lt;/a> &amp;ndash; leaking or hard-coding passwords, tokens or similar sensitive data;&lt;/li>
&lt;li>&lt;a href="../untraceable-artifacts">Untraceable artifacts&lt;/a> &amp;ndash; when builds produce (or worse: deploy!) binaries of unknown source and version; this is a major red flag because it is cheap and easy to fix, but it is usually overlooked causing a major technical debt pile-up;&lt;/li>
&lt;li>&lt;a href="../too-specific">Too specific&lt;/a> &amp;ndash; if your artifacts are not scrubbed from environment-specific dependencies, so they cannot be deployed to all environments;&lt;/li>
&lt;li>&lt;a href="../what-quality">What, quality?&lt;/a> &amp;ndash; when your pipeline does not contain any check on quality, what do you expect as a result?;&lt;/li>
&lt;li>&lt;a href="../bleeding-edge">Bleeding edge&lt;/a> &amp;ndash; using the latest and greatest technology is not always a wise choice;&lt;/li>
&lt;li>&lt;a href="../galactic-builds">Galactic Builds&lt;/a> &amp;ndash; far-reaching builds that slow teams down instead of helping them;&lt;/li>
&lt;li>&lt;a href="../flaky-builds">Flaky builds&lt;/a> &amp;ndash; builds generating unreproducible behaviours or random artefacts;&lt;/li>
&lt;li>&lt;a href="../too-much-of-a-good-thing">Too much of a good thing&lt;/a> &amp;ndash; when you go too far to avoid the above mistakes, causing the fix to backfire;&lt;/li>
&lt;li>&lt;a href="../implicit-assumption">Implicit assumption&lt;/a> &amp;ndash; any build that breaks when some undocumented environmental condition change;&lt;/li>
&lt;li>&lt;a href="../untamed-plugins">Untamed plugins&lt;/a> &amp;ndash; similar to the previous one, it is the nightmare of people that manage your build environments, when the build software uses too many, or even conflicting plugins.&lt;/li>
&lt;/ol>
&lt;p>The list is not really complete: there are more.&lt;/p>
&lt;h2 id="the-unforgivable-sin-having-no-pipeline">The unforgivable sin: having no pipeline&lt;/h2>
&lt;p>This is the ultimate sin of any developer: having no automated process of any kind.&lt;br>
At a minimum you can have a simple bash or PowerShell script to compile and publish your project.
With that it is going to be easy to integrate it in any of the most popular Continuous Integration tools: Jenkins, Azure DevOps, GitHub Actions, GitLab, TeamCity, etc.&lt;br>
That script should check for dependencies and label the produced artifacts with a version number. This will be discussed in detail in future posts.&lt;br>
If you do not need to automate the process for other people, at least, automate it for your future self!&lt;/p>
&lt;p>See you soon with the next episode.&lt;/p></description></item></channel></rss>